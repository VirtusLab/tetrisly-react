{"version":3,"file":"CheckboxGroup.stories-054c1ef8.js","sources":["../../src/components/CheckboxGroup/CheckboxGroup.style.ts","../../src/components/CheckboxGroup/CheckboxGroup.tsx"],"sourcesContent":["import { SystemProps } from '@xstyled/styled-components';\n\nimport { BaseProps } from '@/types/BaseProps';\n\nexport type CheckboxGroupConfig = {\n  innerElements: {\n    checkboxContainer: SystemProps;\n  };\n} & BaseProps;\n\nexport const defaultConfig = {\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 'component-gap-small',\n  innerElements: {\n    checkboxContainer: {\n      display: 'grid',\n      gap: 'component-gap-small component-gap-large',\n    },\n  },\n} satisfies CheckboxGroupConfig;\n","import { Children, FC, isValidElement, PropsWithChildren } from 'react';\n\nimport type {\n  CheckboxGroupProps,\n  CheckboxGroupItemProps,\n} from './CheckboxGroup.props';\nimport { defaultConfig } from './CheckboxGroup.style';\nimport { Checkbox } from '../Checkbox';\nimport { HelperText } from '../HelperText';\nimport { Label } from '../Label';\n\nimport { mergeConfigWithCustom } from '@/services';\nimport { tet } from '@/tetrisly';\nimport { MarginProps } from '@/types';\n\ntype Props = FC<PropsWithChildren<CheckboxGroupProps & MarginProps>> & {\n  Item: FC<CheckboxGroupItemProps>;\n};\n\nexport const CheckboxGroup: Props = ({\n  column = 1,\n  label,\n  helperText,\n  children,\n  custom,\n  ...restProps\n}) => {\n  const {\n    innerElements: { checkboxContainer: checkboxContainerStyles },\n    ...restStyles\n  } = mergeConfigWithCustom({ defaultConfig, custom });\n\n  Children.map(children, (child) => {\n    if (isValidElement(child) && child?.type !== CheckboxGroup.Item) {\n      console.error(\n        'You should use only CheckboxGroup.Item as a child of a CheckboxGroup component.',\n      );\n    }\n  });\n\n  return (\n    <tet.div {...restStyles} {...restProps} data-testid=\"checkbox-group\">\n      {!!label &&\n        (typeof label === 'string' ? (\n          <Label label={label} />\n        ) : (\n          <Label {...label} />\n        ))}\n      <tet.div\n        {...checkboxContainerStyles}\n        gridTemplateColumns={`repeat(${column}, 1fr)`}\n        data-testid=\"checkbox-group-container\"\n      >\n        {children}\n      </tet.div>\n      {!!helperText &&\n        (typeof helperText === 'string' ? (\n          <HelperText text={helperText} />\n        ) : (\n          <HelperText {...helperText} />\n        ))}\n    </tet.div>\n  );\n};\n\nconst Item: FC<CheckboxGroupItemProps> = (props) => <Checkbox {...props} />;\n\nCheckboxGroup.Item = Item;\n"],"names":["defaultConfig","CheckboxGroup","column","label","helperText","children","custom","restProps","checkboxContainerStyles","restStyles","mergeConfigWithCustom","Children","child","isValidElement","jsxs","tet","jsx","Label","HelperText","Item","props","Checkbox"],"mappings":"iZAUO,MAAMA,EAAgB,CAC3B,QAAS,OACT,cAAe,SACf,IAAK,sBACL,cAAe,CACb,kBAAmB,CACjB,QAAS,OACT,IAAK,yCACP,CACF,CACF,ECDOC,EAAA,CAAA,CAA8B,OAAAC,EAAA,EAC1B,MAAAC,EACT,WAAAC,EACA,SAAAC,EACA,OAAAC,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAM,cAAA,CAAA,kBAAAC,CAAA,EACwD,GAAAC,CACzD,EAAAC,EAAA,CAAA,cAAAV,EAAA,OAAAM,CAAA,CAAA,EAGLK,OAAAA,EAAAA,SAAA,IAAAN,EAAAO,GAAA,CACEC,EAAAA,eAAAD,CAAA,IAAAA,GAAA,YAAAA,EAAA,QAAAX,EAAA,MACE,QAAA,MAAQ,iFACN,CAEJ,CAAA,EAGFa,EAAA,KAAAC,EAAA,IAAA,CAAA,GAAAN,EAAA,GAAAF,EAAA,cAAA,iBAAA,SAAA,CAEK,CAAA,CAAAJ,IAAA,OAAAA,GAAA,SAAAa,EAAA,IAAAC,EAAA,CAAA,MAAAd,CAAA,CAAA,EAAAa,EAAAA,IAAAC,EAAA,CAAA,GAAAd,CAAA,CAAA,GAIqBa,EAAA,IAEtBD,EAAA,IAAK,CAAJ,GAAAP,EACK,oBAAA,UAAAN,CAAA,SACiC,cAAA,2BACzB,SAAAG,CAEX,CAAA,EACH,CAAA,CAAAD,IAAA,OAAAA,GAAA,SAAAY,EAAAA,IAAAE,EAAA,CAAA,KAAAd,CAAA,CAAA,EAAAY,EAAA,IAAAE,EAAA,CAAA,GAAAd,CAAA,CAAA,EAKgC,CAAA,CAAA,CAItC,EAEAe,EAAAC,GAAAJ,EAAA,IAAAK,EAAA,CAAA,GAAAD,CAAA,CAAA,EAEAnB,EAAA,KAAAkB;;;;;;;;"}