{"version":3,"file":"Checkbox.stories-f4e4be3c.js","sources":["../../src/docs-components/CheckboxDocs.tsx"],"sourcesContent":["import type { FC } from 'react';\n\nimport { SectionHeader } from './common/SectionHeader';\nimport { States } from './common/States';\n\nimport { Checkbox } from '@/components/Checkbox';\nimport { tet } from '@/tetrisly';\n\nconst getYesNo = (yes: boolean) => (yes ? 'Yes' : 'No');\n\nconst getLabels = (label: boolean, helperText: boolean) => [\n  `Label: ${getYesNo(label)}`,\n  `Helper Text: ${getYesNo(helperText)}`,\n];\n\nexport const CheckboxDocs: FC = () => (\n  <tet.div>\n    {['Unchecked', 'Checked', 'Indeterminate'].map((state) => (\n      <tet.section key={state} py=\"$dimension-500\">\n        <SectionHeader\n          variant=\"H1\"\n          as=\"h2\"\n          px=\"$dimension-1000\"\n          py=\"$dimension-500\"\n        >\n          {state}\n        </SectionHeader>\n\n        {[\n          { label: false, helperText: false },\n          { label: true, helperText: false },\n          { label: true, helperText: true },\n        ].map(({ label, helperText }) => (\n          <tet.div\n            px=\"$dimension-1000\"\n            pb=\"$dimension-500\"\n            key={`${label}${helperText}`}\n          >\n            <SectionHeader\n              variant=\"H2\"\n              as=\"h3\"\n              py=\"$dimension-500\"\n              labels={getLabels(label, helperText)}\n            />\n            <States\n              states={['normal', 'disabled', 'alert'].filter(\n                (currentState) =>\n                  !(currentState === 'alert' && state === 'Checked'),\n              )}\n              flexBasis=\"130px\"\n              gap=\"$dimension-500\"\n            />\n            <tet.div\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              gap=\"$dimension-500\"\n            >\n              <tet.div flexBasis=\"130px\" flexGrow=\"1\" flexShrink=\"0\">\n                <Checkbox\n                  isChecked={state === 'Checked'}\n                  isIndeterminate={state === 'Indeterminate'}\n                  onChange={() => {}}\n                  mt=\"$dimension-500\"\n                  label={\n                    label ? 'Checkbox Label' : (undefined as unknown as string)\n                  }\n                  helperText={helperText ? { text: 'Helper Text' } : undefined}\n                />\n              </tet.div>\n              <tet.div flexBasis=\"130px\" flexGrow=\"1\" flexShrink=\"0\">\n                <Checkbox\n                  isChecked={state === 'Checked'}\n                  isIndeterminate={state === 'Indeterminate'}\n                  onChange={() => {}}\n                  state=\"disabled\"\n                  mt=\"$dimension-500\"\n                  label={\n                    label ? 'Checkbox Label' : (undefined as unknown as string)\n                  }\n                  helperText={helperText ? { text: 'Helper Text' } : undefined}\n                />\n              </tet.div>\n              {state !== 'Checked' && (\n                <tet.div flexBasis=\"130px\" flexGrow=\"1\" flexShrink=\"0\">\n                  <Checkbox\n                    isChecked={false}\n                    isIndeterminate={state === 'Indeterminate'}\n                    onChange={() => {}}\n                    state=\"alert\"\n                    mt=\"$dimension-500\"\n                    label={\n                      label\n                        ? 'Checkbox Label'\n                        : (undefined as unknown as string)\n                    }\n                    helperText={\n                      helperText ? { text: 'Helper Text' } : undefined\n                    }\n                  />\n                </tet.div>\n              )}\n            </tet.div>\n          </tet.div>\n        ))}\n      </tet.section>\n    ))}\n  </tet.div>\n);\n"],"names":["getYesNo","yes","getLabels","label","helperText","CheckboxDocs","jsx","tet","state","jsxs","SectionHeader","States","currentState","Checkbox"],"mappings":"6nBAQA,MAAAA,EAAAC,GAAAA,EAAA,MAAA,KAEAC,EAAA,CAAAC,EAAAC,IAAA,CAA2D,UAAAJ,EAAAG,CAAA,CAAA,GAChC,gBAAAH,EAAAI,CAAA,CAAA,EAE3B,EAEOC,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAA,CAAA,SAAA,CAAA,YAAA,UAAA,eAAA,EAAA,IAAAC,GAAAC,OAAAF,EAAA,QAAA,CAAA,GAAA,iBAAA,SAAA,CAICD,EAAA,IAAAI,EAAC,CAAA,QAAA,KACS,GAAA,KACL,GAAA,kBACA,GAAA,iBACA,SAAAF,CAEF,CAAA,EACH,CAEC,CAAA,MAAA,GAAA,WAAA,EAAA,EACmC,CAAA,MAAA,GAAA,WAAA,EAAA,EACD,CAAA,MAAA,GAAA,WAAA,EAAA,CACD,EAAA,IAAA,CAAA,CAAA,MAAAL,EAAA,WAAAC,CAAA,IAAAK,EAAA,KAEhCF,EAAA,IAAK,CAAJ,GAAA,kBACI,GAAA,iBACA,SAAA,CAGHD,EAAA,IAAAI,EAAC,CAAA,QAAA,KACS,GAAA,KACL,GAAA,iBACA,OAAAR,EAAAC,EAAAC,CAAA,CACgC,CAAA,EACrCE,EAAA,IACAK,EAAC,CAAA,OAAA,CAAA,SAAA,WAAA,OAAA,EAAA,OACyCC,GAAA,EAAAA,IAAA,SAAAJ,IAAA,UAEI,EAC5C,UAAA,QACU,IAAA,gBACN,CAAA,EACNC,EAAA,KACAF,EAAA,IAAK,CAAJ,QAAA,OACS,WAAA,SACG,eAAA,SACI,IAAA,iBACX,SAAA,CAEJD,EAAAA,IAAAC,EAAA,IAAA,CAAA,UAAA,QAAA,SAAA,IAAA,WAAA,IAAA,SAAAD,EAAA,IACEO,EAAC,CAAA,UAAAL,IAAA,UACsB,gBAAAA,IAAA,gBACM,SAAA,IAAA,CACX,EAAC,GAAA,iBACd,MAAAL,EAAA,iBAAA,OAE2B,WAAAC,EAAA,CAAA,KAAA,aAAA,EAAA,MAEqB,CAAA,EAAA,EAEvDE,EAAAA,IAAAC,EAAA,IAAA,CAAA,UAAA,QAAA,SAAA,IAAA,WAAA,IAAA,SAAAD,EAAA,IAEEO,EAAC,CAAA,UAAAL,IAAA,UACsB,gBAAAA,IAAA,gBACM,SAAA,IAAA,CACX,EAAC,MAAA,WACX,GAAA,iBACH,MAAAL,EAAA,iBAAA,OAE2B,WAAAC,EAAA,CAAA,KAAA,aAAA,EAAA,MAEqB,CAAA,EAAA,EAEvDI,IAAA,WAAAF,EAAAA,IAAAC,EAAA,IAAA,CAAA,UAAA,QAAA,SAAA,IAAA,WAAA,IAAA,SAAAD,EAAA,IAGIO,EAAC,CAAA,UAAA,GACY,gBAAAL,IAAA,gBACgB,SAAA,IAAA,CACX,EAAC,MAAA,QACX,GAAA,iBACH,MAAAL,EAAA,iBAAA,OAII,WAAAC,EAAA,CAAA,KAAA,aAAA,EAAA,MAGkC,CAAA,EAAA,CAG7C,CAAA,CAAA,CAEJ,CAAA,EAAA,GAAAD,CAAA,GAAAC,CAAA,EAlE0B,CAAA,CAoE7B,GAAAI,CAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}