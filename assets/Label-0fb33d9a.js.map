{"version":3,"file":"Label-0fb33d9a.js","sources":["../../src/components/Label/Label.styles.ts","../../src/components/Label/stylesBuilder/stylesBuilder.ts","../../src/components/Label/Label.tsx"],"sourcesContent":["import type { BaseProps } from '@/types/BaseProps';\n\nexport type LabelConfig = {\n  innerElements?: {\n    tooltip?: BaseProps;\n    optional?: BaseProps;\n    action?: BaseProps;\n  };\n} & BaseProps;\n\nexport const defaultConfig = {\n  text: 'medium-175',\n  color: 'content-primary',\n  display: 'flex',\n  alignItems: 'flex-start',\n  gap: 'component-gap-xSmall',\n  innerElements: {\n    tooltip: {\n      color: 'content-secondary',\n      display: 'flex',\n      alignItems: 'center',\n      minHeight: 'xSmall',\n    },\n    optional: {\n      color: 'content-tertiary',\n    },\n    action: {\n      ml: 'auto',\n    },\n  },\n} satisfies LabelConfig;\n","import type { LabelProps } from '../Label.props';\nimport { defaultConfig } from '../Label.styles';\n\nimport { mergeConfigWithCustom } from '@/services';\nimport type { BaseProps } from '@/types/BaseProps';\n\ntype LabelStylesBuilder = {\n  label: BaseProps;\n  optional: BaseProps;\n  tooltip: BaseProps;\n  action: BaseProps;\n};\n\nexport const stylesBuilder = (\n  custom: LabelProps['custom'],\n): LabelStylesBuilder => {\n  const config = mergeConfigWithCustom({ defaultConfig, custom });\n  const {\n    innerElements: { optional, tooltip, action },\n    ...label\n  } = config;\n\n  return {\n    label,\n    optional,\n    tooltip,\n    action,\n  };\n};\n","import { Icon } from '@virtuslab/tetrisly-icons';\nimport { FC, useMemo } from 'react';\n\nimport type { LabelProps } from './Label.props';\nimport { stylesBuilder } from './stylesBuilder';\nimport { Button } from '../Button';\n\nimport { tet } from '@/tetrisly';\nimport { MarginProps } from '@/types/MarginProps';\n\nexport const Label: FC<LabelProps & MarginProps> = ({\n  label,\n  tooltip,\n  action,\n  optional,\n  custom,\n  ...restProps\n}) => {\n  const styles = useMemo(() => stylesBuilder(custom), [custom]);\n\n  return (\n    <tet.label {...styles.label} data-testid=\"label\" {...restProps}>\n      {label}\n      {!!optional && (\n        <tet.span {...styles.optional} data-testid=\"label-optional\">\n          {optional}\n        </tet.span>\n      )}\n      {/* TODO: add tooltip instead of bare icon, when we get one */}\n      {tooltip && (\n        <tet.span {...styles.tooltip} data-testid=\"label-tooltip\">\n          <Icon name=\"16-info\" />\n        </tet.span>\n      )}\n      {!!action && (\n        <Button\n          variant=\"bare\"\n          appearance=\"primary\"\n          {...action}\n          {...styles.action}\n          data-testid=\"label-action\"\n        />\n      )}\n    </tet.label>\n  );\n};\n"],"names":["defaultConfig","stylesBuilder","custom","config","mergeConfigWithCustom","optional","tooltip","action","label","Label","restProps","styles","useMemo","jsxs","tet","jsx","Icon","Button"],"mappings":"yOAUO,MAAMA,EAAgB,CAC3B,KAAM,aACN,MAAO,kBACP,QAAS,OACT,WAAY,aACZ,IAAK,uBACL,cAAe,CACb,QAAS,CACP,MAAO,oBACP,QAAS,OACT,WAAY,SACZ,UAAW,QACb,EACA,SAAU,CACR,MAAO,kBACT,EACA,OAAQ,CACN,GAAI,MACN,CACF,CACF,ECjBaC,EACXC,GACuB,CACvB,MAAMC,EAASC,EAAsB,CAAE,cAAAJ,EAAe,OAAAE,CAAQ,CAAA,EACxD,CACJ,cAAe,CAAE,SAAAG,EAAU,QAAAC,EAAS,OAAAC,CAAO,EAC3C,GAAGC,CACD,EAAAL,EAEG,MAAA,CACL,MAAAK,EACA,SAAAH,EACA,QAAAC,EACA,OAAAC,CAAA,CAEJ,EClBOE,EAAA,CAAA,CAA6C,MAAAD,EAClD,QAAAF,EACA,OAAAC,EACA,SAAAF,EACA,OAAAH,EACA,GAAAQ,CAEF,IAAA,CACE,MAAAC,EAAAC,EAAAA,QAAA,IAAAX,EAAAC,CAAA,EAAA,CAAAA,CAAA,CAAA,EAEA,OAAAW,OAAAC,EAAA,MAAA,CAAA,GAAAH,EAAA,MAAA,cAAA,QAAA,GAAAD,EAAA,SAAA,CAEKF,EAAA,CAAA,CAAAH,GAAAU,EAAAA,IAAAD,EAAA,KAAA,CAAA,GAAAH,EAAA,SAAA,cAAA,iBAAA,SAAAN,CAAA,CAAA,EAICC,GAAAS,EAAA,IAAAD,EAAA,KAAA,CAAA,GAAAH,EAAA,QAAA,cAAA,gBAAA,SAAAI,EAAAA,IAAAC,EAAA,CAAA,KAAA,SAAA,CAAA,EAAA,EAMA,CAAA,CAAAT,GAAAQ,EAAA,IAGAE,EAAC,CAAA,QAAA,OACS,WAAA,UACG,GAAAV,EACP,GAAAI,EAAA,OACO,cAAA,cACC,CAAA,CACd,CAAA,CAAA,CAIR"}