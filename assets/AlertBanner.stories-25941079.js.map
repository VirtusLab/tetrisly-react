{"version":3,"file":"AlertBanner.stories-25941079.js","sources":["../../src/components/AlertBanner/AlertBanner.styles.ts","../../src/components/AlertBanner/stylesBuilder/stylesBuilder.ts","../../src/components/AlertBanner/AlertBanner.tsx","../../src/docs-components/AlertBannerDocs.tsx"],"sourcesContent":["import { AlertBannerIntent } from './types/AlertBannerIntent.type';\n\nimport { BaseProps } from '@/types/BaseProps';\nimport { IconName } from '@/utility-types/IconName';\n\nexport type AlertBannerConfig = {\n  intent?: Partial<Record<AlertBannerIntent, BaseProps>>;\n  innerElements?: {\n    iconContainer?: BaseProps;\n    actionContainer?: BaseProps;\n    closeButton?: BaseProps;\n  };\n} & BaseProps;\n\nexport const defaultConfig = {\n  p: '$space-component-padding-medium',\n  pl: '$space-component-padding-2xLarge',\n  display: 'flex',\n  alignItems: 'center',\n  text: '$typo-body-medium',\n  intent: {\n    none: {\n      backgroundColor: '$color-background-neutral-strong',\n      color: '$color-content-primary-inverted',\n    },\n    success: {\n      backgroundColor: '$color-background-positive-strong',\n      color: '$color-content-primary-inverted',\n    },\n    warning: {\n      backgroundColor: '$color-background-warning-strong',\n      color: '$color-content-primary',\n    },\n    negative: {\n      backgroundColor: '$color-background-negative-strong',\n      color: '$color-content-primary-inverted',\n    },\n  },\n  innerElements: {\n    iconContainer: {\n      mr: '$space-component-gap-small',\n    },\n    actionContainer: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      gap: '$space-component-gap-small',\n      ml: '$space-component-gap-large',\n    },\n    closeButton: {\n      ml: 'auto',\n    },\n  },\n} satisfies AlertBannerConfig;\n\nexport const resolveIconName = (intent: AlertBannerIntent) => {\n  const iconConfig = {\n    none: '20-info-fill',\n    success: '20-check-circle-fill',\n    warning: '20-warning-fill',\n    negative: '20-alert-fill',\n  } satisfies Record<AlertBannerIntent, IconName<20>>;\n\n  return iconConfig[intent];\n};\n","import { AlertBannerProps } from '../AlertBanner.props';\nimport { defaultConfig } from '../AlertBanner.styles';\nimport { AlertBannerIntent } from '../types';\n\nimport { BareButtonProps } from '@/components/Button/Button.props';\nimport { GhostIconButtonProps } from '@/components/IconButton/IconButton.props';\nimport { mergeConfigWithCustom } from '@/services';\nimport { BaseProps } from '@/types/BaseProps';\n\ntype AlertBannerStylesBuilder = {\n  container: BaseProps;\n  iconContainer: BaseProps;\n  actionContainer: BaseProps;\n  closeButton: BaseProps;\n  actionProps: Partial<BareButtonProps>;\n  closeButtonProps: Partial<GhostIconButtonProps>;\n};\n\nexport const stylesBuilder = (\n  intent: AlertBannerIntent,\n  custom: AlertBannerProps['custom'],\n): AlertBannerStylesBuilder => {\n  const {\n    intent: intentStyles,\n    innerElements: { iconContainer, actionContainer, closeButton },\n    ...restStyles\n  } = mergeConfigWithCustom({ defaultConfig, custom });\n\n  const actionProps = {\n    appearance: intent === 'warning' ? 'reverseInverted' : 'inverted',\n  } as const;\n\n  const closeButtonProps = {\n    appearance: intent === 'warning' ? 'primary' : 'inverted',\n  } as const;\n\n  return {\n    container: {\n      ...intentStyles[intent],\n      ...restStyles,\n    },\n    iconContainer,\n    actionContainer,\n    actionProps,\n    closeButtonProps,\n    closeButton,\n  };\n};\n","import { Icon } from '@virtuslab/tetrisly-icons';\nimport { FC, useMemo } from 'react';\n\nimport { AlertBannerProps } from './AlertBanner.props';\nimport { resolveIconName } from './AlertBanner.styles';\nimport { stylesBuilder } from './stylesBuilder';\nimport { Button } from '../Button';\nimport { IconButton } from '../IconButton';\n\nimport { useAction } from '@/hooks';\nimport { tet } from '@/tetrisly';\nimport { MarginProps } from '@/types';\n\nexport const AlertBanner: FC<AlertBannerProps & MarginProps> = ({\n  text,\n  intent = 'none',\n  custom,\n  action,\n  onCloseClick,\n  ...restProps\n}) => {\n  const styles = useMemo(() => stylesBuilder(intent, custom), [intent, custom]);\n\n  const [firstAction, secondAction] = useAction(action);\n\n  const iconName = useMemo(() => resolveIconName(intent), [intent]);\n\n  return (\n    <tet.div {...styles.container} data-testid=\"alert-banner\" {...restProps}>\n      <tet.span\n        {...styles.iconContainer}\n        data-testid=\"alert-banner-iconContainer\"\n      >\n        <Icon name={iconName} />\n      </tet.span>\n      {text}\n      {firstAction && (\n        <tet.div\n          {...styles.actionContainer}\n          data-testid=\"alert-banner-actionContainer\"\n        >\n          <Button variant=\"bare\" {...styles.actionProps} {...firstAction} />\n          {secondAction && (\n            <>\n              <tet.div>&middot;</tet.div>\n              <Button\n                variant=\"bare\"\n                {...styles.actionProps}\n                {...secondAction}\n              />\n            </>\n          )}\n        </tet.div>\n      )}\n      {!!onCloseClick && (\n        <IconButton\n          size=\"small\"\n          variant=\"ghost\"\n          intent=\"none\"\n          icon=\"20-close\"\n          onClick={onCloseClick}\n          {...styles.closeButton}\n          {...styles.closeButtonProps}\n          data-testid=\"alert-banner-closeButton\"\n        />\n      )}\n    </tet.div>\n  );\n};\n","import { action } from '@storybook/addon-actions';\nimport { capitalize } from 'lodash';\n\nimport { SectionHeader } from './common/SectionHeader';\n\nimport { AlertBanner } from '@/components/AlertBanner';\nimport { AlertBannerIntent } from '@/components/AlertBanner/types';\nimport { tet } from '@/tetrisly';\n\nconst intents = [\n  'none',\n  'success',\n  'warning',\n  'negative',\n] satisfies AlertBannerIntent[];\n\nexport const AlertBannerDocs = () => (\n  <>\n    {intents.map((intent) => (\n      <tet.section key={intent}>\n        <SectionHeader\n          px={{ md: '$dimension-1000', _: '$dimension-500' }}\n          py=\"$dimension-500\"\n          variant=\"H1\"\n        >\n          Intent: {capitalize(intent)}\n        </SectionHeader>\n        <tet.div px={{ md: '$dimension-1000', _: '$dimension-500' }}>\n          <SectionHeader py=\"$dimension-500\" variant=\"H2\">\n            Action: No\n          </SectionHeader>\n          <AlertBanner text=\"Alert text\" intent={intent} />\n        </tet.div>\n        <tet.div px={{ md: '$dimension-1000', _: '$dimension-500' }}>\n          <SectionHeader py=\"$dimension-500\" variant=\"H2\">\n            Action: Yes\n          </SectionHeader>\n          <AlertBanner\n            text=\"Alert text\"\n            intent={intent}\n            my=\"$dimension-500\"\n            action={[\n              {\n                label: 'Click me',\n                onClick: action('onClick'),\n              },\n              {\n                label: 'Or click me',\n                onClick: action('onClick'),\n              },\n            ]}\n          />\n        </tet.div>\n      </tet.section>\n    ))}\n  </>\n);\n"],"names":["defaultConfig","resolveIconName","intent","stylesBuilder","custom","intentStyles","iconContainer","actionContainer","closeButton","restStyles","mergeConfigWithCustom","actionProps","closeButtonProps","AlertBanner","text","action","onCloseClick","restProps","styles","useMemo","firstAction","secondAction","useAction","iconName","jsxs","tet","jsx","Icon","Button","Fragment","IconButton","intents","AlertBannerDocs","SectionHeader","capitalize"],"mappings":"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"}