{"version":3,"file":"InlineBanner.stories-965965b4.js","sources":["../../src/components/InlineBanner/InlineBanner.styles.ts","../../src/components/InlineBanner/stylesBuilder/stylesBuilder.ts","../../src/components/InlineBanner/InlineBanner.tsx"],"sourcesContent":["import type { InlineBannerIntent } from './types';\n\nimport type { BaseProps } from '@/types';\nimport { IconName } from '@/utility-types/IconName';\n\nexport type InlineBannerConfig = {\n  intent?: Partial<Record<InlineBannerIntent, BaseProps>>;\n  innerElements?: {\n    iconContainer?: {\n      intent?: Partial<Record<InlineBannerIntent, BaseProps>>;\n    } & BaseProps;\n    contentContainer?: BaseProps;\n    actionContainer?: BaseProps;\n    description?: BaseProps;\n    title?: {\n      intent?: Partial<Record<InlineBannerIntent, BaseProps>>;\n    } & BaseProps;\n    closeButton?: BaseProps;\n  };\n  spacing?: {\n    closeButton?: BaseProps;\n  };\n} & BaseProps;\n\nexport const defaultConfig = {\n  display: 'flex',\n  p: 'component-padding-xLarge',\n  gap: 'component-gap-large',\n  borderRadius: 'large',\n  ring: 'small',\n  ringInset: true,\n  intent: {\n    none: {\n      backgroundColor: 'background-neutral-subtle',\n      ringColor: 'border-neutral-subtle',\n    },\n    informative: {\n      backgroundColor: 'background-informative-subtle',\n      ringColor: 'border-informative-subtle',\n    },\n    success: {\n      backgroundColor: 'background-positive-subtle',\n      ringColor: 'border-positive-subtle',\n    },\n    warning: {\n      backgroundColor: 'background-warning-subtle',\n      ringColor: 'border-warning-subtle',\n    },\n    negative: {\n      backgroundColor: 'background-negative-subtle',\n      ringColor: 'border-negative-subtle',\n    },\n  },\n  innerElements: {\n    iconContainer: {\n      h: 'xSmall',\n      display: 'flex',\n      alignItems: 'center',\n      intent: {\n        none: {\n          color: 'content-secondary',\n        },\n        informative: {\n          color: 'content-informative-secondary',\n        },\n        success: {\n          color: 'content-positive-secondary',\n        },\n        warning: {\n          color: 'content-warning-secondary',\n        },\n        negative: {\n          color: 'content-negative-secondary',\n        },\n      },\n    },\n    contentContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    actionContainer: {\n      display: 'flex',\n      gap: 'component-gap-small',\n      mt: 'component-gap-large',\n    },\n    description: {\n      color: 'content-secondary',\n      text: 'body-medium',\n    },\n    title: {\n      text: 'body-strong-medium',\n      mb: 'component-gap-xSmall',\n      intent: {\n        none: {\n          color: 'content-primary',\n        },\n        informative: {\n          color: 'content-informative-primary',\n        },\n        success: {\n          color: 'content-positive-primary',\n        },\n        warning: {\n          color: 'content-warning-primary',\n        },\n        negative: {\n          color: 'content-negative-primary',\n        },\n      },\n    },\n    closeButton: {\n      ml: 'auto',\n    },\n  },\n  spacing: {\n    closeButton: {\n      pr: 'component-padding-large',\n    },\n  },\n} satisfies InlineBannerConfig;\n\nexport const resolveIconName = (intent: InlineBannerIntent): IconName<20> => {\n  const iconConfig: Record<InlineBannerIntent, IconName<20>> = {\n    none: '20-info-fill',\n    informative: '20-info-fill',\n    success: '20-check-circle-fill',\n    warning: '20-warning-fill',\n    negative: '20-alert-fill',\n  };\n\n  return iconConfig[intent];\n};\n","import type { InlineBannerProps } from '../InlineBanner.props';\nimport { defaultConfig } from '../InlineBanner.styles';\nimport type { InlineBannerIntent } from '../types';\n\nimport { mergeConfigWithCustom } from '@/services';\nimport type { BaseProps } from '@/types';\n\ntype StylesBuilderParams = {\n  intent: InlineBannerIntent;\n  hasCloseButton: boolean;\n  custom: InlineBannerProps['custom'];\n};\n\ntype InlineBannerStylesBuilder = {\n  container: BaseProps;\n  iconContainer: BaseProps;\n  contentContainer: BaseProps;\n  actionContainer: BaseProps;\n  description: BaseProps;\n  title: BaseProps;\n  closeButton: BaseProps;\n};\n\nexport const stylesBuilder = ({\n  intent,\n  hasCloseButton,\n  custom,\n}: StylesBuilderParams): InlineBannerStylesBuilder => {\n  const {\n    intent: intentStyles,\n    innerElements: {\n      iconContainer,\n      contentContainer,\n      actionContainer,\n      description,\n      title,\n      closeButton,\n    },\n    spacing,\n    ...restProps\n  } = mergeConfigWithCustom({ defaultConfig, custom });\n\n  const { intent: intentTitleStyles, ...restTitleStyles } = title;\n  const titleStyles = {\n    ...intentTitleStyles[intent],\n    ...restTitleStyles,\n  };\n\n  const { intent: intentIconContainerStyles, ...restIconContainerStyles } =\n    iconContainer;\n  const iconContainerStyles = {\n    ...iconContainer.intent[intent],\n    ...restIconContainerStyles,\n  };\n\n  return {\n    container: {\n      ...restProps,\n      ...intentStyles[intent],\n      ...(hasCloseButton && spacing.closeButton),\n    },\n    iconContainer: iconContainerStyles,\n    contentContainer,\n    actionContainer,\n    description,\n    title: titleStyles,\n    closeButton,\n  };\n};\n","import { Icon } from '@virtuslab/tetrisly-icons';\nimport type { MarginProps } from '@xstyled/styled-components';\nimport { FC, useMemo } from 'react';\n\nimport type { InlineBannerProps } from './InlineBanner.props';\nimport { resolveIconName } from './InlineBanner.styles';\nimport { stylesBuilder } from './stylesBuilder';\nimport { Button } from '../Button';\nimport { IconButton } from '../IconButton';\n\nimport { useAction } from '@/hooks';\nimport { tet } from '@/tetrisly/tetrisly';\n\nexport const InlineBanner: FC<InlineBannerProps & MarginProps> = ({\n  title,\n  description,\n  intent = 'none',\n  action,\n  onCloseClick,\n  custom,\n  ...restProps\n}) => {\n  const styles = useMemo(\n    () => stylesBuilder({ intent, hasCloseButton: !!onCloseClick, custom }),\n    [intent, onCloseClick, custom],\n  );\n\n  const [firstAction, secondAction] = useAction(action);\n\n  const iconName = useMemo(() => resolveIconName(intent), [intent]);\n\n  return (\n    <tet.div {...styles.container} data-testid=\"inline-banner\" {...restProps}>\n      <tet.span\n        {...styles.iconContainer}\n        data-testid=\"inline-banner-iconContainer\"\n      >\n        <Icon name={iconName} />\n      </tet.span>\n      <tet.div\n        {...styles.contentContainer}\n        data-testid=\"inline-banner-contentContainer\"\n      >\n        <tet.span {...styles.title} data-testid=\"inline-banner-title\">\n          {title}\n        </tet.span>\n        {!!description && (\n          <tet.span\n            {...styles.description}\n            data-testid=\"inline-banner-description\"\n          >\n            {description}\n          </tet.span>\n        )}\n        {firstAction && (\n          <tet.div\n            {...styles.actionContainer}\n            data-testid=\"inline-banner-actionContainer\"\n          >\n            <Button\n              variant=\"default\"\n              appearance=\"secondary\"\n              intent=\"none\"\n              size=\"small\"\n              {...firstAction}\n            />\n            {secondAction && (\n              <Button\n                variant=\"ghost\"\n                appearance=\"secondary\"\n                intent=\"none\"\n                size=\"small\"\n                {...secondAction}\n              />\n            )}\n          </tet.div>\n        )}\n      </tet.div>\n      {!!onCloseClick && (\n        <IconButton\n          size=\"small\"\n          variant=\"ghost\"\n          intent=\"none\"\n          icon=\"20-close\"\n          onClick={onCloseClick}\n          {...styles.closeButton}\n          data-testid=\"inline-banner-closeButton\"\n        />\n      )}\n    </tet.div>\n  );\n};\n"],"names":["defaultConfig","resolveIconName","intent","stylesBuilder","hasCloseButton","custom","intentStyles","iconContainer","contentContainer","actionContainer","description","title","closeButton","spacing","restProps","mergeConfigWithCustom","intentTitleStyles","restTitleStyles","titleStyles","intentIconContainerStyles","restIconContainerStyles","iconContainerStyles","InlineBanner","action","onCloseClick","styles","useMemo","firstAction","secondAction","useAction","iconName","jsxs","tet","jsx","Icon","Button","IconButton"],"mappings":"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"}