{"version":3,"file":"Badge.stories-474af958.js","sources":["../../src/types/BasicIntent.ts","../../src/components/Badge/Badge.styles.ts","../../src/components/Badge/Badge.tsx"],"sourcesContent":["export const basicIntents = [\n  'neutral',\n  'informative',\n  'positive',\n  'warning',\n  'negative',\n] as const;\n\nexport type BasicIntent = (typeof basicIntents)[number];\n","import { SystemProps } from '@xstyled/styled-components';\n\nimport { fromEntries } from '@/services/fromEntries';\nimport type { Appearance, BasicIntent } from '@/types';\nimport { appearances } from '@/types/Appearance';\nimport { BaseProps } from '@/types/BaseProps';\nimport { basicIntents } from '@/types/BasicIntent';\n\nexport type BadgeConfig = {\n  appearance: Record<\n    Appearance,\n    Record<'high' | 'medium' | 'low', SystemProps>\n  >;\n  intent: Record<BasicIntent, Record<'high' | 'medium' | 'low', SystemProps>>;\n  label: SystemProps;\n  icon: SystemProps;\n} & BaseProps;\n\nexport const config = {\n  appearance: {\n    ...fromEntries(\n      appearances.map((basicAppearance) => [\n        basicAppearance,\n        {\n          high: {\n            color: 'nonSemantic-white-content-primary',\n            backgroundColor: `nonSemantic-${basicAppearance}-background-strong`,\n          },\n          medium: {\n            color: `nonSemantic-${basicAppearance}-content-primary`,\n            backgroundColor: `nonSemantic-${basicAppearance}-background-muted`,\n          },\n          low: {\n            color: `nonSemantic-${basicAppearance}-content-primary`,\n            backgroundColor: `nonSemantic-${basicAppearance}-background-onSubtle`,\n          },\n        },\n      ]),\n    ),\n  },\n  intent: {\n    ...fromEntries(\n      basicIntents.map((basicIntent) => [\n        basicIntent,\n        {\n          high: {\n            color: `content-primary${\n              basicIntent !== 'warning' ? '-inverted' : ''\n            }` as SystemProps['color'],\n            backgroundColor: `background-${basicIntent}-strong`,\n          },\n          medium: {\n            color: `content-${\n              basicIntent !== 'neutral' ? `${basicIntent}-` : ''\n            }primary` as SystemProps['color'],\n            backgroundColor: `background-${basicIntent}-muted`,\n          },\n          low: {\n            color: `content-${\n              basicIntent !== 'neutral' ? `${basicIntent}-` : ''\n            }-primary` as SystemProps['color'],\n            backgroundColor: `background-${basicIntent}-onSubtle`,\n          },\n        },\n      ]),\n    ),\n  },\n  display: 'flex',\n  w: 'fit-content',\n  h: 'xSmall',\n  borderRadius: 'large',\n  flexShrink: 0,\n  alignItems: 'center',\n  label: {\n    padding: 'component-padding-small',\n  },\n  icon: {\n    padding: 'component-padding-xSmall',\n  },\n  gap: 'component-gap-xSmall',\n} satisfies BadgeConfig;\n","import { Icon } from '@virtuslab/tetrisly-icons';\nimport { merge } from 'lodash';\n\nimport { BadgeProps } from './Badge.props';\nimport { config as defaultConfig } from './Badge.styles';\n\nimport { tet } from '@/tetrisly';\nimport { MarginProps } from '@/types/MarginProps';\n\nexport const Badge = ({\n  appearance,\n  intent,\n  emphasis = 'high',\n  beforeIcon,\n  afterIcon,\n  icon,\n  label,\n  custom = {},\n  ...restProps\n}: BadgeProps & MarginProps) => {\n  const config = merge(defaultConfig, custom);\n  const {\n    appearance: appearanceStyles,\n    intent: intentStyles,\n    label: labelStyles,\n    icon: iconStyles,\n    ...restStyles\n  } = config;\n\n  if (!appearance && !intent) {\n    throw new Error('Badge needs to have defined appearance or intent prop');\n  }\n\n  const color = appearance\n    ? appearanceStyles[appearance][emphasis]\n    : intentStyles[intent][emphasis];\n  const padding = label ? labelStyles : iconStyles;\n  return (\n    <tet.div\n      {...color}\n      {...padding}\n      {...restStyles}\n      {...restProps}\n      data-testid=\"badge\"\n    >\n      {!!beforeIcon && <Icon name={beforeIcon} data-testid=\"badge-icon\" />}\n      {!!icon && <Icon name={icon} data-testid=\"badge-icon\" />}\n      {label}\n      {!!afterIcon && <Icon name={afterIcon} data-testid=\"badge-icon\" />}\n    </tet.div>\n  );\n};\n"],"names":["basicIntents","config","fromEntries","appearances","basicAppearance","basicIntent","Badge","appearance","intent","emphasis","beforeIcon","afterIcon","icon","label","custom","restProps","merge","defaultConfig","appearanceStyles","intentStyles","labelStyles","iconStyles","restStyles","color","padding","jsxs","tet","jsx","Icon"],"mappings":"yQAAO,MAAMA,EAAe,CAC1B,UACA,cACA,WACA,UACA,UACF,ECYaC,EAAS,CACpB,WAAY,CACV,GAAGC,EACDC,EAAY,IAAKC,GAAoB,CACnCA,EACA,CACE,KAAM,CACJ,MAAO,oCACP,gBAAiB,eAAeA,CAAe,oBACjD,EACA,OAAQ,CACN,MAAO,eAAeA,CAAe,mBACrC,gBAAiB,eAAeA,CAAe,mBACjD,EACA,IAAK,CACH,MAAO,eAAeA,CAAe,mBACrC,gBAAiB,eAAeA,CAAe,sBACjD,CACF,CAAA,CACD,CACH,CACF,EACA,OAAQ,CACN,GAAGF,EACDF,EAAa,IAAKK,GAAgB,CAChCA,EACA,CACE,KAAM,CACJ,MAAO,kBACLA,IAAgB,UAAY,YAAc,EAC5C,GACA,gBAAiB,cAAcA,CAAW,SAC5C,EACA,OAAQ,CACN,MAAO,WACLA,IAAgB,UAAY,GAAGA,CAAW,IAAM,EAClD,UACA,gBAAiB,cAAcA,CAAW,QAC5C,EACA,IAAK,CACH,MAAO,WACLA,IAAgB,UAAY,GAAGA,CAAW,IAAM,EAClD,WACA,gBAAiB,cAAcA,CAAW,WAC5C,CACF,CAAA,CACD,CACH,CACF,EACA,QAAS,OACT,EAAG,cACH,EAAG,SACH,aAAc,QACd,WAAY,EACZ,WAAY,SACZ,MAAO,CACL,QAAS,yBACX,EACA,KAAM,CACJ,QAAS,0BACX,EACA,IAAK,sBACP,ECvEOC,EAAA,CAAA,CAAe,WAAAC,EACpB,OAAAC,EACA,SAAAC,EAAA,OACW,WAAAC,EACX,UAAAC,EACA,KAAAC,EACA,MAAAC,EACA,OAAAC,EAAA,CAAA,EACU,GAAAC,CAEZ,IAAA,CACE,MAAAd,EAAAe,EAAAA,MAAAC,EAAAH,CAAA,EACA,CAAM,WAAAI,EACQ,OAAAC,EACJ,MAAAC,EACD,KAAAC,EACD,GAAAC,CACH,EAAArB,EAGL,GAAA,CAAAM,GAAA,CAAAC,EACE,MAAA,IAAA,MAAA,uDAAA,EAGF,MAAAe,EAAAhB,EAAAW,EAAAX,CAAA,EAAAE,CAAA,EAAAU,EAAAX,CAAA,EAAAC,CAAA,EAGAe,EAAAX,EAAAO,EAAAC,EACA,OAAAI,EAAA,KACEC,EAAA,IAAK,CAAJ,GAAAH,EACK,GAAAC,EACA,GAAAF,EACA,GAAAP,EACA,cAAA,QACQ,SAAA,CAEX,CAAA,CAAAL,GAAAiB,EAAAA,IAAAC,EAAA,CAAA,KAAAlB,EAAA,cAAA,aAAA,EAAiE,CAAA,CAAAE,GAAAe,EAAAA,IAAAC,EAAA,CAAA,KAAAhB,EAAA,cAAA,aAAA,EACZC,EACrD,CAAA,CAAAF,GAAAgB,EAAAA,IAAAC,EAAA,CAAA,KAAAjB,EAAA,cAAA,aAAA,CAC+D,CAAA,CAAA,CAGtE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}