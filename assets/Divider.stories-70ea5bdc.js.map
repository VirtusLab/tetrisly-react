{"version":3,"file":"Divider.stories-70ea5bdc.js","sources":["../../src/components/Divider/Divider.styles.ts","../../src/components/Divider/stylesBuilder/stylesBuilder.ts","../../src/components/Divider/Divider.tsx"],"sourcesContent":["import type { DividerOrientation } from './types';\n\nimport type { BaseProps } from '@/types/BaseProps';\n\nexport type DividerConfig = {\n  orientation?: Partial<Record<DividerOrientation, BaseProps>>;\n} & BaseProps;\n\nexport const defaultConfig = {\n  backgroundColor: '$color-border-default',\n  orientation: {\n    horizontal: {\n      w: '100%',\n      h: '1px',\n    },\n    vertical: {\n      w: '1px',\n      h: '100%',\n    },\n  },\n} satisfies DividerConfig;\n","import type { DividerProps } from '../Divider.props';\nimport { defaultConfig } from '../Divider.styles';\nimport type { DividerOrientation } from '../types';\n\nimport { mergeConfigWithCustom } from '@/services';\nimport type { BaseProps } from '@/types/BaseProps';\n\ntype StylesBuilderParams = {\n  orientation: DividerOrientation;\n  width: DividerProps['width'];\n  height: DividerProps['height'];\n  custom: DividerProps['custom'];\n};\n\ntype DividerStylesBuilder = {\n  container: BaseProps;\n};\n\nexport const stylesBuilder = ({\n  orientation,\n  width,\n  height,\n  custom,\n}: StylesBuilderParams): DividerStylesBuilder => {\n  const { orientation: orientationStyles, ...restStyles } =\n    mergeConfigWithCustom({ defaultConfig, custom });\n\n  return {\n    container: {\n      w: width ?? orientationStyles[orientation].w,\n      h: height ?? orientationStyles[orientation].h,\n      ...restStyles,\n    },\n  };\n};\n","import { FC, useMemo } from 'react';\n\nimport type { DividerProps } from './Divider.props';\nimport { stylesBuilder } from './stylesBuilder';\n\nimport { tet } from '@/tetrisly';\nimport type { MarginProps } from '@/types';\n\nexport const Divider: FC<DividerProps & MarginProps> = ({\n  orientation = 'horizontal',\n  width,\n  height,\n  custom = {},\n  ...restProps\n}) => {\n  const styles = useMemo(\n    () => stylesBuilder({ orientation, width, height, custom }),\n    [orientation, width, height, custom],\n  );\n\n  return <tet.hr {...styles.container} data-testid=\"divider\" {...restProps} />;\n};\n"],"names":["defaultConfig","stylesBuilder","orientation","width","height","custom","orientationStyles","restStyles","mergeConfigWithCustom","Divider","restProps","styles","useMemo","jsx","tet"],"mappings":"wWAQO,MAAMA,EAAgB,CAC3B,gBAAiB,wBACjB,YAAa,CACX,WAAY,CACV,EAAG,OACH,EAAG,KACL,EACA,SAAU,CACR,EAAG,MACH,EAAG,MACL,CACF,CACF,ECFaC,EAAgB,CAAC,CAC5B,YAAAC,EACA,MAAAC,EACA,OAAAC,EACA,OAAAC,CACF,IAAiD,CACzC,KAAA,CAAE,YAAaC,EAAmB,GAAGC,CAAA,EACzCC,EAAsB,CAAE,cAAAR,EAAe,OAAAK,CAAA,CAAQ,EAE1C,MAAA,CACL,UAAW,CACT,EAAGF,GAASG,EAAkBJ,CAAW,EAAE,EAC3C,EAAGE,GAAUE,EAAkBJ,CAAW,EAAE,EAC5C,GAAGK,CACL,CAAA,CAEJ,EC1BOE,EAAA,CAAA,CAAiD,YAAAP,EAAA,aACxC,MAAAC,EACd,OAAAC,EACA,OAAAC,EAAA,CAAA,EACU,GAAAK,CAEZ,IAAA,CACE,MAAAC,EAAAC,EAAA,QAAe,IAAAX,EAAA,CAAA,YAAAC,EAAA,MAAAC,EAAA,OAAAC,EAAA,OAAAC,CAAA,CAAA,EAC6C,CAAAH,EAAAC,EAAAC,EAAAC,CAAA,CACvB,EAGrC,OAAAQ,MAAAC,EAAA,GAAA,CAAA,GAAAH,EAAA,UAAA,cAAA,UAAA,GAAAD,CAAA,CAAA,CACF;;;;;;;"}