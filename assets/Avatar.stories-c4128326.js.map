{"version":3,"file":"Avatar.stories-c4128326.js","sources":["../../src/types/Size.ts","../../src/components/Avatar/Avatar.styles.ts","../../src/components/Avatar/stylesBuilder.ts","../../src/components/Avatar/Avatar.tsx","../../src/docs-components/AvatarDocs.tsx"],"sourcesContent":["export const sizes = ['large', 'medium', 'small', 'xSmall', '2xSmall'] as const;\n\nexport type Size = (typeof sizes)[number];\n","import { AvatarShape } from './AvatarShape.type';\n\nimport { fromEntries } from '@/services/fromEntries';\nimport { Appearance, appearances } from '@/types/Appearance';\nimport { BaseProps } from '@/types/BaseProps';\nimport { Emphasis } from '@/types/Emphasis';\nimport { Size, sizes } from '@/types/Size';\n\nexport type AvatarConfig = {\n  nestedImage: BaseProps;\n  shape: Record<AvatarShape, BaseProps>;\n  size: Record<Size, BaseProps>;\n  appearance: Record<\n    Appearance | 'image',\n    {\n      emphasis: Record<Emphasis, BaseProps>;\n    }\n  >;\n} & BaseProps;\n\nexport const config = {\n  nestedImage: {\n    w: '100%',\n    h: '100%',\n  },\n  overflow: 'hidden',\n  position: 'relative',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  shape: {\n    rounded: {\n      borderRadius: 'full',\n    },\n    square: {\n      borderRadius: 'large',\n    },\n  },\n  size: sizes.reduce(\n    (acc, size) => ({\n      ...acc,\n      [size]: {\n        w: size,\n        h: size,\n        text: `body-${size.includes('xSmall') ? 'strong-xSmall' : size}`,\n      },\n    }),\n    {} as Record<Size, BaseProps>,\n  ),\n\n  appearance: {\n    image: {\n      emphasis: {\n        high: {},\n        low: {},\n      },\n    },\n    ...fromEntries(\n      appearances.map((appearance) => [\n        appearance,\n        {\n          emphasis: {\n            high: {\n              color: 'nonSemantic-white-content-primary',\n              backgroundColor: `nonSemantic-${appearance}-background-strong`,\n            },\n            low: {\n              color: `nonSemantic-${appearance}-content-primary`,\n              backgroundColor: `nonSemantic-${appearance}-background-muted`,\n            },\n          },\n        },\n      ]),\n    ),\n  },\n} satisfies AvatarConfig;\n","import { merge } from 'lodash';\n\nimport { AvatarProps } from './Avatar.props';\nimport { AvatarConfig } from './Avatar.styles';\n\nimport { DeepPartial } from '@/utility-types/DeepPartial';\n\nexport const stylesBuilder = ({\n  config: originalConfig,\n  custom,\n  variant,\n}: {\n  config: AvatarConfig;\n  custom: DeepPartial<AvatarConfig>;\n  variant: Required<\n    Pick<AvatarProps, 'appearance' | 'emphasis' | 'shape' | 'size'>\n  >;\n}) => {\n  const {\n    appearance: appearanceStyles,\n    shape: shapeStyles,\n    size: sizeStyles,\n    ...base\n  } = merge(originalConfig, custom);\n  const { appearance, emphasis, shape, size } = variant;\n\n  return {\n    ...base,\n    ...appearanceStyles[appearance].emphasis[emphasis],\n    ...shapeStyles[shape],\n    ...sizeStyles[size],\n  };\n};\n","import { FC, ImgHTMLAttributes } from 'react';\n\nimport { AvatarProps } from './Avatar.props';\nimport { config } from './Avatar.styles';\nimport { stylesBuilder } from './stylesBuilder';\n\nimport { tet } from '@/tetrisly';\nimport { MarginProps } from '@/types/MarginProps';\n\nexport const Avatar: FC<AvatarProps> = ({\n  appearance = 'blue',\n  emphasis = 'low',\n  shape = 'rounded',\n  size = 'medium',\n  custom = {},\n  initials,\n  ...rest\n}) => {\n  const { nestedImage, ...styles } = stylesBuilder({\n    config,\n    custom,\n    variant: { appearance, emphasis, shape, size },\n  });\n\n  const [img, marginProps] = extractImage(rest);\n\n  return (\n    <tet.div {...{ ...styles, ...marginProps }}>\n      {img !== null ? <tet.img {...nestedImage} {...img} /> : initials}\n    </tet.div>\n  );\n};\n\nfunction extractImage<T extends object>(obj: T) {\n  if ('img' in obj) {\n    const { img, ...marginProps } = obj as {\n      img: Omit<ImgHTMLAttributes<HTMLImageElement>, 'color'>;\n    } & MarginProps;\n    return [img, marginProps] as const;\n  }\n  return [null, obj] as const;\n}\n","import { Avatar } from '../components/Avatar/Avatar';\nimport { AvatarProps } from '../components/Avatar/Avatar.props';\nimport { appearances } from '../types/Appearance';\n\nimport { tet } from '@/tetrisly';\n\nconst sizes = [\n  'large',\n  'medium',\n  'small',\n  'xSmall',\n  '2xSmall',\n] satisfies AvatarProps['size'][];\nconst shapes = ['rounded', 'square'] as const;\nconst emphasises = ['low', 'high'] as const;\n\nconst RowAvatar = ({ size: _, ...props }: AvatarProps) => (\n  <tet.div display=\"flex\" gap=\"40px\" alignItems=\"center\">\n    {sizes.map((size) => (\n      <Avatar key={size} {...props} size={size} />\n    ))}\n  </tet.div>\n);\n\nexport const AvatarDocs = () => (\n  <>\n    {emphasises.map((emphasis) => (\n      <tet.section key={emphasis} pb=\"component-padding-4xLarge\" px=\"1000\">\n        <tet.h2 py=\"500\" text=\"header-3xLarge\">\n          {capitalize(emphasis)} Emphasis\n        </tet.h2>\n        <tet.div display=\"flex\" gap=\"80px\" justifyContent=\"space-between\">\n          {shapes.map((shape) => (\n            <tet.div key={shape} display=\"flex\" flexDirection=\"column\">\n              <tet.h3\n                py=\"component-padding-2xLarge\"\n                color=\"content-secondary\"\n                text=\"body-large\"\n                borderBottomWidth=\"1px\"\n                borderBottomColor=\"border-default\"\n              >\n                {shape === 'rounded'\n                  ? 'Shape: Rounded (Default)'\n                  : 'Shape: Square'}\n              </tet.h3>\n              <tet.hr />\n              <tet.div\n                display=\"flex\"\n                flexDirection=\"column\"\n                gap=\"component-gap-xLarge\"\n                py=\"component-padding-2xLarge\"\n              >\n                {emphasis === 'low' && (\n                  <RowAvatar\n                    appearance=\"image\"\n                    shape={shape}\n                    img={{\n                      src: 'https://thispersondoesnotexist.com/',\n                    }}\n                  />\n                )}\n                {appearances.map((appearance) => (\n                  <RowAvatar\n                    key={`${appearance}${shape}${emphasis}`}\n                    appearance={appearance}\n                    shape={shape}\n                    emphasis={emphasis}\n                    initials=\"M\"\n                  />\n                ))}\n              </tet.div>\n            </tet.div>\n          ))}\n        </tet.div>\n      </tet.section>\n    ))}\n  </>\n);\n\nfunction capitalize(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n"],"names":["sizes","config","acc","size","fromEntries","appearances","appearance","stylesBuilder","originalConfig","custom","variant","appearanceStyles","shapeStyles","sizeStyles","base","merge","emphasis","shape","Avatar","initials","rest","nestedImage","styles","img","marginProps","extractImage","jsx","tet","obj","shapes","emphasises","RowAvatar","_","props","AvatarDocs","Fragment","jsxs","capitalize","string"],"mappings":"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"}