{"version":3,"file":"TextInput-f59117f1.js","sources":["../../src/components/TextInput/TextInput.style.ts","../../src/components/TextInput/TextInput.tsx"],"sourcesContent":["import { BaseProps } from '@/types/BaseProps';\n\nexport type TextInputConfig = {\n  innerComponents: Record<'input' | 'icon' | 'text' | 'clearButton', BaseProps>;\n  spacing:\n    | Record<\n        'beforeComponent',\n        Record<'Icon' | 'Avatar' | 'Prefix' | 'Dropdown', BaseProps>\n      >\n    | Record<\n        'afterComponent',\n        Record<\n          'Icon' | 'Sufix' | 'Button' | 'IconButton' | 'Dropdown',\n          BaseProps\n        >\n      >;\n} & BaseProps;\n\nexport const config = {\n  display: 'flex',\n  alignItems: 'center',\n  h: 'medium',\n  padding: 'component-padding-small component-padding-large',\n  flexShrink: 0,\n  ring: '100',\n  ringColor: {\n    _: 'interaction-border-neutral-normal',\n    hover: 'interaction-border-hover',\n    focus: 'interaction-focus-default',\n    alert: 'interaction-border-alert',\n  },\n  borderRadius: 'medium',\n  opacity: {\n    disabled: 'disabled',\n  },\n  outlineStyle: {\n    focusWithin: 'solid',\n  },\n  outlineColor: {\n    focusWithin: 'interaction-focus-default',\n  },\n  outlineWidth: {\n    focusWithin: 'focus',\n  },\n  outlineOffset: {\n    alert: 'focus',\n  },\n  transition: true,\n  transitionDuration: 50,\n  cursor: 'text',\n  pointerEvents: {\n    disabled: 'none',\n  },\n  innerComponents: {\n    input: {\n      w: '100%',\n      h: '100%',\n      outline: 'none',\n      text: 'body-medium',\n      color: {\n        placeholder: 'content-tertiary',\n      },\n      backgroundColor: 'interaction-background-formField',\n    },\n    icon: {\n      color: 'content-secondary',\n    },\n    text: {\n      text: 'body-medium',\n      color: 'content-secondary',\n    },\n    clearButton: {\n      marginLeft: 'component-gap-small',\n    },\n  },\n  spacing: {\n    beforeComponent: {\n      Icon: {\n        marginLeft: 'component-padding-medium',\n        marginRight: 'component-padding-small',\n      },\n      Avatar: {\n        margin: '0 component-padding-small',\n      },\n      Prefix: {\n        margin: '0 component-padding-large',\n      },\n      Dropdown: {\n        marginLeft: 'component-padding-xSmall',\n        marginRight: 'component-padding-small',\n      },\n    },\n    afterComponent: {\n      Icon: {\n        marginLeft: 'component-padding-small',\n        marginRight: 'component-padding-large',\n      },\n      Sufix: {\n        marginLeft: 'component-padding-small',\n        marginRight: 'component-padding-large',\n      },\n      Button: {\n        marginLeft: 'component-padding-small',\n        marginRight: 'component-padding-xSmall',\n      },\n      IconButton: {\n        marginLeft: 'component-padding-small',\n        marginRight: 'component-padding-xSmall',\n      },\n      Dropdown: {\n        marginLeft: 'component-padding-small',\n        marginRight: 'component-padding-xSmall',\n      },\n    },\n  },\n} satisfies TextInputConfig;\n","import { Icon } from '@virtuslab/tetrisly-icons';\nimport { merge } from 'lodash';\nimport {\n  forwardRef,\n  useRef,\n  useCallback,\n  useMemo,\n  useState,\n  ChangeEventHandler,\n  MouseEventHandler,\n} from 'react';\n\nimport { TextInputProps } from './TextInput.props';\nimport { config as defaultConfig } from './TextInput.style';\nimport { Button } from '../Button';\nimport { IconButton } from '../IconButton';\n\nimport { extractMarginProps } from '@/services/extractMarginProps';\nimport { tet } from '@/tetrisly';\nimport { MarginProps } from '@/types/MarginProps';\n\nexport const TextInput = forwardRef<\n  HTMLInputElement,\n  TextInputProps & MarginProps\n>(\n  (\n    {\n      type = 'text',\n      beforeComponent,\n      afterComponent,\n      state,\n      hasClearButton,\n      custom,\n      value,\n      onChange,\n      ...rest\n    },\n    inputRef,\n  ) => {\n    const [innerValue, setInnerValue] = useState('');\n    const [marginProps, inputProps] = extractMarginProps<\n      TextInputProps & MarginProps\n    >(rest);\n\n    const config = useMemo(() => merge(custom, defaultConfig), [custom]);\n    const {\n      innerComponents: {\n        input: inputStyles,\n        icon: iconStyles,\n        text: textStyles,\n        clearButton: clearButtonStyles,\n      },\n      spacing,\n      ...defaultStyles\n    } = config;\n\n    const containerRef = useRef<HTMLInputElement | null>(null);\n\n    const handleContainerClick: MouseEventHandler = useCallback(\n      (e) => {\n        if (e.target === containerRef.current) {\n          const input = containerRef.current?.querySelector('input');\n\n          if (input) input.focus();\n        }\n      },\n      [containerRef],\n    );\n\n    const handleOnChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n      (e) => {\n        value === undefined ? setInnerValue(e.target.value) : onChange?.(e);\n      },\n      [onChange, value],\n    );\n\n    const handleOnClear: MouseEventHandler<HTMLButtonElement> =\n      useCallback(() => {\n        value === undefined\n          ? setInnerValue('')\n          : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onChange?.({ target: { value: '' } } as any);\n      }, [onChange, value]);\n\n    return (\n      <tet.div\n        ref={containerRef}\n        onClick={handleContainerClick}\n        {...defaultStyles}\n        pl={!!beforeComponent && '0'}\n        pr={!!afterComponent && '0'}\n        {...marginProps}\n        data-state={state}\n        data-testid=\"text-input\"\n      >\n        {!!beforeComponent && (\n          <tet.span\n            {...spacing.beforeComponent[beforeComponent.type]}\n            data-testid=\"text-input-before-component\"\n          >\n            {beforeComponent.type === 'Icon' && (\n              <tet.span {...iconStyles}>\n                <Icon {...beforeComponent.props} />\n              </tet.span>\n            )}\n            {beforeComponent.type === 'Prefix' && (\n              <tet.span {...textStyles}>{beforeComponent.props.text}</tet.span>\n            )}\n            {beforeComponent.type === 'Dropdown' && (\n              <Button\n                size=\"small\"\n                variant=\"ghost\"\n                label={beforeComponent.props.label}\n                dropdownIndicator\n              />\n            )}\n          </tet.span>\n        )}\n        <tet.input\n          {...inputStyles}\n          value={value || innerValue}\n          onChange={handleOnChange}\n          {...inputProps}\n          type={type}\n          disabled={state === 'disabled'}\n          ref={inputRef}\n          data-testid=\"text-input-input\"\n        />\n        {!!hasClearButton && (value || innerValue) && (\n          <IconButton\n            variant=\"bare\"\n            icon=\"20-close\"\n            onClick={handleOnClear}\n            {...clearButtonStyles}\n            data-testid=\"text-input-clear-button\"\n          />\n        )}\n        {!!afterComponent && (\n          <tet.span\n            {...spacing.afterComponent[afterComponent.type]}\n            data-testid=\"text-input-after-component\"\n          >\n            {afterComponent.type === 'Icon' && (\n              <tet.span {...iconStyles}>\n                <Icon {...afterComponent.props} />\n              </tet.span>\n            )}\n            {afterComponent.type === 'IconButton' && (\n              <IconButton\n                variant=\"ghost\"\n                size=\"small\"\n                {...afterComponent.props}\n              />\n            )}\n            {afterComponent.type === 'Sufix' && (\n              <tet.span {...textStyles}>{afterComponent.props.text}</tet.span>\n            )}\n            {afterComponent.type === 'Button' && (\n              <Button size=\"small\" variant=\"ghost\" label=\"Label\" />\n            )}\n            {afterComponent.type === 'Dropdown' && (\n              <Button\n                size=\"small\"\n                variant=\"ghost\"\n                label={afterComponent.props.label}\n                dropdownIndicator\n              />\n            )}\n          </tet.span>\n        )}\n      </tet.div>\n    );\n  },\n);\n"],"names":["config","TextInput","forwardRef","type","beforeComponent","afterComponent","state","hasClearButton","custom","value","onChange","rest","inputRef","innerValue","setInnerValue","useState","marginProps","inputProps","extractMarginProps","useMemo","merge","defaultConfig","inputStyles","iconStyles","textStyles","clearButtonStyles","spacing","defaultStyles","containerRef","useRef","handleContainerClick","useCallback","e","input","_a","handleOnChange","handleOnClear","jsxs","tet","jsx","Icon","Button","IconButton"],"mappings":"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"}