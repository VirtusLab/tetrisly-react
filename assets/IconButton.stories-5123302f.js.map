{"version":3,"file":"IconButton.stories-5123302f.js","sources":["../../src/docs-components/IconButtonDocs.tsx"],"sourcesContent":["import { capitalize, startCase } from 'lodash';\nimport { ComponentProps } from 'react';\n\nimport { SectionHeader } from './common/SectionHeader';\nimport { useLoading } from './hooks/useLoading';\n\nimport { IconButton, IconButtonProps } from '@/components/IconButton';\nimport { tet } from '@/tetrisly';\n\nconst variants = ['default', 'ghost', 'bare'] as const;\nconst getAppearances = (variant: (typeof variants)[number]) => {\n  if (variant === 'default') {\n    return ['primary', 'inverted'] as const;\n  }\n  return ['primary', 'inverted', 'reverseInverted'] as const;\n};\nconst getIntents = (appearance: ReturnType<typeof getAppearances>[number]) => {\n  if (appearance === 'primary') {\n    return ['none', 'success', 'destructive'] as const;\n  }\n  return ['none'] as const;\n};\n\nconst LoadingIconButton = (props: ComponentProps<typeof IconButton>) => {\n  const [isLoading, startLoading] = useLoading();\n  return (\n    <IconButton\n      {...props}\n      state={isLoading ? 'loading' : undefined}\n      onClick={startLoading}\n    />\n  );\n};\n\nexport const IconButtonDocs = () => (\n  <>\n    {variants.map((variant) => (\n      <tet.section key={variant}>\n        <SectionHeader variant=\"Hero\" as=\"h2\" px=\"$dimension-1000\">\n          {capitalize(variant)}\n        </SectionHeader>\n        <tet.div>\n          {getAppearances(variant).map((appearance) => (\n            <tet.div\n              key={`${variant}${appearance}`}\n              bg={\n                appearance === 'inverted'\n                  ? '$color-background-inverted'\n                  : undefined\n              }\n            >\n              <SectionHeader\n                inverted={appearance === 'inverted'}\n                variant=\"H1\"\n                as=\"h3\"\n                py=\"$dimension-500\"\n                px=\"$dimension-1000\"\n              >\n                {startCase(appearance)}\n              </SectionHeader>\n              {getIntents(appearance).map((intent) => {\n                const iconButtonProps = {\n                  appearance,\n                  intent,\n                  icon: '20-placeholder',\n                } as IconButtonProps;\n                return (\n                  <tet.div\n                    display=\"grid\"\n                    gridTemplateColumns=\"1fr 1fr\"\n                    px=\"$dimension-1000\"\n                    key={`${variant}${appearance}${intent}`}\n                  >\n                    <tet.div py=\"$dimension-500\">\n                      <SectionHeader\n                        variant=\"H2\"\n                        as=\"h4\"\n                        inverted={appearance === 'inverted'}\n                        labels={[\n                          `Intent: ${capitalize(intent)}`,\n                          'Dropdown: false',\n                        ]}\n                      />\n                      <LoadingIconButton\n                        mt=\"$dimension-500\"\n                        {...iconButtonProps}\n                      />\n                    </tet.div>\n                    <tet.div py=\"$dimension-500\">\n                      <SectionHeader\n                        variant=\"H2\"\n                        as=\"h4\"\n                        inverted={appearance === 'inverted'}\n                        labels={[\n                          `Intent: ${capitalize(intent)}`,\n                          'Dropdown: true',\n                        ]}\n                      />\n                      <LoadingIconButton\n                        mt=\"$dimension-500\"\n                        {...iconButtonProps}\n                        hasDropdownIndicator\n                      />\n                    </tet.div>\n                  </tet.div>\n                );\n              })}\n            </tet.div>\n          ))}\n        </tet.div>\n      </tet.section>\n    ))}\n  </>\n);\n"],"names":["variants","getAppearances","variant","getIntents","appearance","LoadingIconButton","props","isLoading","startLoading","useLoading","jsx","IconButton","IconButtonDocs","Fragment","jsxs","tet","SectionHeader","capitalize","intent","iconButtonProps"],"mappings":"0nBASA,MAAMA,EAAW,CAAC,UAAW,QAAS,MAAM,EACtCC,EAAkBC,GAClBA,IAAY,UACP,CAAC,UAAW,UAAU,EAExB,CAAC,UAAW,WAAY,iBAAiB,EAE5CC,EAAcC,GACdA,IAAe,UACV,CAAC,OAAQ,UAAW,aAAa,EAEnC,CAAC,MAAM,EAGVC,EAAqBC,GAA6C,CACtE,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAW,EAE3C,OAAAC,EAAA,IAACC,EAAA,CACE,GAAGL,EACJ,MAAOC,EAAY,UAAY,OAC/B,QAASC,CAAA,CAAA,CAGf,EAEaI,EAAiB,IAC5BF,EAAA,IAAAG,WAAA,CACG,SAASb,EAAA,IAAKE,GACbY,EAAA,KAACC,EAAI,QAAJ,CACC,SAAA,CAACL,EAAAA,IAAAM,EAAA,CAAc,QAAQ,OAAO,GAAG,KAAK,GAAG,kBACtC,SAAWC,aAAAf,CAAO,CACrB,CAAA,EACAQ,MAACK,EAAI,IAAJ,CACE,WAAeb,CAAO,EAAE,IAAKE,GAC5BU,EAAA,KAACC,EAAI,IAAJ,CAEC,GACEX,IAAe,WACX,6BACA,OAGN,SAAA,CAAAM,EAAA,IAACM,EAAA,CACC,SAAUZ,IAAe,WACzB,QAAQ,KACR,GAAG,KACH,GAAG,iBACH,GAAG,kBAEF,qBAAUA,CAAU,CAAA,CACvB,EACCD,EAAWC,CAAU,EAAE,IAAKc,GAAW,CACtC,MAAMC,EAAkB,CACtB,WAAAf,EACA,OAAAc,EACA,KAAM,gBAAA,EAGN,OAAAJ,EAAA,KAACC,EAAI,IAAJ,CACC,QAAQ,OACR,oBAAoB,UACpB,GAAG,kBAGH,SAAA,CAAAD,EAAA,KAACC,EAAI,IAAJ,CAAQ,GAAG,iBACV,SAAA,CAAAL,EAAA,IAACM,EAAA,CACC,QAAQ,KACR,GAAG,KACH,SAAUZ,IAAe,WACzB,OAAQ,CACN,WAAWa,EAAAA,WAAWC,CAAM,CAAC,GAC7B,iBACF,CAAA,CACF,EACAR,EAAA,IAACL,EAAA,CACC,GAAG,iBACF,GAAGc,CAAA,CACN,CAAA,EACF,EACCL,EAAA,KAAAC,EAAI,IAAJ,CAAQ,GAAG,iBACV,SAAA,CAAAL,EAAA,IAACM,EAAA,CACC,QAAQ,KACR,GAAG,KACH,SAAUZ,IAAe,WACzB,OAAQ,CACN,WAAWa,EAAAA,WAAWC,CAAM,CAAC,GAC7B,gBACF,CAAA,CACF,EACAR,EAAA,IAACL,EAAA,CACC,GAAG,iBACF,GAAGc,EACJ,qBAAoB,EAAA,CACtB,CAAA,EACF,CAAA,CAAA,EAhCK,GAAGjB,CAAO,GAAGE,CAAU,GAAGc,CAAM,EAAA,CAiCvC,CAEH,CAAA,CAAA,EA9DI,GAAGhB,CAAO,GAAGE,CAAU,EAgE/B,CAAA,EACH,CAAA,GAxEgBF,CAyElB,CACD,EACH;;;;;;;;;"}