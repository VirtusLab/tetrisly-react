{"version":3,"file":"SectionHeader-36595b54.js","sources":["../../src/docs-components/common/SectionHeader.tsx"],"sourcesContent":["import { ReactNode } from 'react';\n\nimport { tet } from '@/tetrisly';\nimport { BaseProps } from '@/types';\n\ninterface SectionHeaderProps extends BaseProps {\n  variant: 'H1' | 'H2' | 'H3' | 'Hero';\n  inverted?: boolean;\n  children?: ReactNode;\n  labels?: string[];\n  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n}\n\nexport const SectionHeader = ({\n  inverted,\n  variant,\n  labels,\n  children,\n  ...props\n}: SectionHeaderProps) => {\n  const label = labels ? (\n    <tet.div display=\"flex\" gap=\"8px\">\n      {labels.map((l, i) =>\n        i !== 0 ? (\n          <>\n            <tet.span>Â·</tet.span>\n            <tet.span>{l}</tet.span>\n          </>\n        ) : (\n          <tet.span>{l}</tet.span>\n        ),\n      )}\n    </tet.div>\n  ) : (\n    children\n  );\n  if (variant === 'Hero') {\n    return (\n      <tet.h1\n        text={{ md: '$typo-header-4xLarge', _: '$typo-header-xLarge' }}\n        py=\"$dimension-500\"\n        color={\n          inverted\n            ? '$color-content-primary-inverted'\n            : '$color-content-primary'\n        }\n        {...(props as BaseProps)}\n      >\n        {label}\n      </tet.h1>\n    );\n  }\n  if (variant === 'H1') {\n    return (\n      <tet.h2\n        text={{ md: '$typo-header-3xLarge', _: '$typo-header-large' }}\n        color={\n          inverted\n            ? '$color-content-primary-inverted'\n            : '$color-content-primary'\n        }\n        {...(props as BaseProps)}\n      >\n        {label}\n      </tet.h2>\n    );\n  }\n  if (variant === 'H2') {\n    return (\n      <tet.div\n        display=\"flex\"\n        borderBottomWidth=\"1px\"\n        borderBottomColor={\n          inverted ? '$color-border-neutral-strong' : '$color-border-default'\n        }\n      >\n        <tet.h3\n          text={{ md: '$typo-body-large', _: '$typo-body-medium' }}\n          color={\n            inverted\n              ? '$color-content-secondary-inverted'\n              : '$color-content-secondary'\n          }\n          {...(props as BaseProps)}\n        >\n          {label}\n        </tet.h3>\n      </tet.div>\n    );\n  }\n  if (variant === 'H3') {\n    return (\n      <tet.h4\n        text={{ md: '$typo-body-medium', _: '$typo-body-small' }}\n        color=\"$color-content-secondary\"\n        {...(props as BaseProps)}\n      >\n        {label}\n      </tet.h4>\n    );\n  }\n  return null;\n};\n"],"names":["SectionHeader","inverted","variant","labels","children","props","label","jsx","tet","l","i","jsxs","Fragment"],"mappings":"0DAaO,MAAAA,EAAA,CAAA,CAAuB,SAAAC,EAC5B,QAAAC,EACA,OAAAC,EACA,SAAAC,EACA,GAAAC,CAEF,IAAA,CACE,MAAAC,EAAAH,EAAAI,MAAAC,EAAA,IAAA,CAAA,QAAA,OAAA,IAAA,MAAA,SAAAL,EAAA,IAEY,CAAAM,EAAAC,IAAAA,IAAA,EAAAC,OAAAC,EAAAA,SAAA,CAAA,SAAA,CAGFL,EAAAA,IAAAC,EAAA,KAAA,CAAA,SAAA,GAAA,CAAA,EAAWD,EAAAA,IAAAC,EAAA,KAAA,CAAA,SAAAC,CAAA,CAAA,CACE,CAAA,CAAA,EAAAF,EAAAA,IAAAC,EAAA,KAAA,CAAA,SAAAC,EAAA,CAGF,CAAA,CAAA,EAAAL,EAOrB,OAAAF,IAAA,OACEK,EAAA,IACEC,EAAA,GAAK,CAAJ,KAAA,CAAA,GAAA,uBAAA,EAAA,qBAAA,EAC8D,GAAA,iBAC1D,MAAAP,EAAA,kCAAA,yBAIG,GAAAI,EAED,SAAAC,CAEJ,CAAA,EAIPJ,IAAA,KACEK,EAAA,IACEC,EAAA,GAAK,CAAJ,KAAA,CAAA,GAAA,uBAAA,EAAA,oBAAA,EAC6D,MAAAP,EAAA,kCAAA,yBAItD,GAAAI,EAED,SAAAC,CAEJ,CAAA,EAIPJ,IAAA,KACEK,EAAA,IACEC,EAAA,IAAK,CAAJ,QAAA,OACS,kBAAA,MACU,kBAAAP,EAAA,+BAAA,wBAE4B,SAAAM,EAAA,IAG9CC,EAAA,GAAK,CAAJ,KAAA,CAAA,GAAA,mBAAA,EAAA,mBAAA,EACwD,MAAAP,EAAA,oCAAA,2BAIjD,GAAAI,EAED,SAAAC,CAEJ,CAAA,CACH,CAAA,EAINJ,IAAA,KACEK,EAAA,IACEC,EAAA,GAAK,CAAJ,KAAA,CAAA,GAAA,oBAAA,EAAA,kBAAA,EACwD,MAAA,2BACjD,GAAAH,EACD,SAAAC,CAEJ,CAAA,EAIP,IACF"}