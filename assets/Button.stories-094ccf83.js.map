{"version":3,"file":"Button.stories-094ccf83.js","sources":["../../src/docs-components/ButtonDocs/LoadingButton.tsx","../../src/docs-components/ButtonDocs/ButtonSizes.tsx","../../src/docs-components/ButtonDocs/ButtonRow.tsx","../../src/docs-components/ButtonDocs/ButtonDocs.tsx"],"sourcesContent":["import { useLoading } from '../hooks/useLoading';\n\nimport { Button, ButtonProps } from '@/components/Button';\n\nexport const LoadingButton = (props: ButtonProps) => {\n  const [isLoading, startLoading] = useLoading();\n  return (\n    <Button\n      {...props}\n      state={isLoading ? 'loading' : undefined}\n      onClick={startLoading}\n    />\n  );\n};\n","import { LoadingButton } from './LoadingButton';\n\nimport { ButtonProps } from '@/components/Button';\nimport { tet } from '@/tetrisly';\n\nconst getButtonSizes = (variant: ButtonProps['variant']) => {\n  if (variant === 'bare') {\n    return ['medium', 'large'] as const;\n  }\n  return ['small', 'medium', 'large'] as const;\n};\n\nexport const ButtonSizes = ({ variant, ...buttonProps }: ButtonProps) => (\n  <tet.div\n    display=\"flex\"\n    flexBasis=\"180px\"\n    flexGrow=\"1\"\n    flexShrink=\"0\"\n    alignItems=\"flex-start\"\n    justifyContent=\"center\"\n    flexDirection=\"column\"\n    gap=\"400\"\n    py=\"500\"\n  >\n    {getButtonSizes(variant).map((size) => (\n      <LoadingButton\n        key={size}\n        {...({ ...buttonProps, size, variant } as ButtonProps)}\n      />\n    ))}\n  </tet.div>\n);\n","import { ButtonSizes } from './ButtonSizes';\n\nimport { ButtonProps } from '@/components/Button';\nimport { tet } from '@/tetrisly';\n\ntype ButtonRowProps = Pick<ButtonProps, 'variant' | 'appearance' | 'intent'>;\n\nexport const ButtonRow = ({ variant, appearance, intent }: ButtonRowProps) => {\n  const baseProps = { variant, appearance, intent } as ButtonProps;\n  return (\n    <tet.div display=\"flex\" gap=\"300\" overflowX=\"scroll\">\n      <ButtonSizes {...baseProps} label=\"Button label\" />\n      <ButtonSizes\n        {...baseProps}\n        label=\"Button label\"\n        beforeIcon=\"20-placeholder\"\n      />\n      <ButtonSizes\n        {...({\n          ...baseProps,\n          label: 'Button label',\n          afterIcon: '20-placeholder',\n        } as ButtonProps)}\n      />\n      <ButtonSizes\n        {...({\n          ...baseProps,\n          label: 'Button label',\n          beforeIcon: '20-placeholder',\n          afterIcon: '20-placeholder',\n        } as ButtonProps)}\n      />\n      <ButtonSizes\n        {...({\n          ...baseProps,\n          label: 'Button label',\n          hasDropdownIndicator: true,\n        } as ButtonProps)}\n      />\n      <ButtonSizes\n        {...({\n          ...baseProps,\n          label: 'Button label',\n          beforeIcon: '20-placeholder',\n          hasDropdownIndicator: true,\n        } as ButtonProps)}\n      />\n    </tet.div>\n  );\n};\n","import { startCase } from 'lodash';\nimport { FC } from 'react';\n\nimport { ButtonRow } from './ButtonRow';\nimport { SectionHeader } from '../common/SectionHeader';\n\nimport { ButtonProps } from '@/components/Button';\nimport { tet } from '@/tetrisly';\n\nconst variants = ['default', 'ghost', 'bare'] as const;\n\nconst getButtonAppearances = (variant: ButtonProps['variant']) => {\n  if (variant === 'default') {\n    return ['primary', 'secondary', 'inverted'] as const;\n  }\n  return ['primary', 'secondary', 'inverted', 'reverseInverted'] as const;\n};\n\nconst getButtonIntents = (\n  variant: ButtonProps['variant'],\n  appearance: ButtonProps['appearance'],\n) => {\n  if (\n    (variant === 'default' && appearance === 'secondary') ||\n    appearance === 'primary'\n  )\n    return ['none', 'success', 'destructive'] as const;\n  return ['none'] as const;\n};\n\nexport const ButtonDocs: FC = () => (\n  <>\n    {variants.map((variant) => (\n      <tet.section key={variant} display=\"flex\" pt=\"500\" flexDirection=\"column\">\n        <SectionHeader variant=\"Hero\" as=\"h2\">\n          {startCase(variant)}\n        </SectionHeader>\n        {getButtonAppearances(variant).map((appearance) => (\n          <tet.div\n            key={appearance}\n            display=\"flex\"\n            flexDirection=\"column\"\n            bg={appearance === 'inverted' ? 'background-inverted' : undefined}\n          >\n            <SectionHeader\n              variant=\"H2\"\n              inverted={appearance === 'inverted'}\n              as=\"h3\"\n              px=\"1000\"\n              py=\"500\"\n              borderBottom=\"neutral-strong\"\n            >\n              {startCase(appearance)}\n            </SectionHeader>\n\n            {getButtonIntents(variant, appearance).map((intent) => (\n              <tet.div\n                key={intent}\n                display=\"flex\"\n                flexDirection=\"column\"\n                px=\"1000\"\n                pb=\"500\"\n                borderBottomWidth=\"1px\"\n                borderBottomColor=\"border-neutral-subtle\"\n              >\n                <SectionHeader\n                  variant=\"H3\"\n                  as=\"h4\"\n                  pt=\"500\"\n                  inverted={appearance === 'inverted'}\n                >\n                  Intent: {startCase(intent)}\n                </SectionHeader>\n                <ButtonRow\n                  variant={variant}\n                  appearance={appearance}\n                  intent={intent}\n                />\n              </tet.div>\n            ))}\n          </tet.div>\n        ))}\n      </tet.section>\n    ))}\n  </>\n);\n"],"names":["LoadingButton","props","isLoading","startLoading","useLoading","jsx","Button","getButtonSizes","variant","ButtonSizes","buttonProps","tet","size","ButtonRow","appearance","intent","baseProps","jsxs","variants","getButtonAppearances","getButtonIntents","ButtonDocs","Fragment","SectionHeader","startCase"],"mappings":"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"}