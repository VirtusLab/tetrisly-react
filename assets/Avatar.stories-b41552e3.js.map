{"version":3,"file":"Avatar.stories-b41552e3.js","sources":["../../src/docs-components/AvatarDocs.tsx"],"sourcesContent":["import { capitalize } from 'lodash';\n\nimport { Cols } from './common/Cols';\nimport { SectionHeader } from './common/SectionHeader';\nimport { Avatar } from '../components/Avatar/Avatar';\nimport { AvatarProps } from '../components/Avatar/Avatar.props';\nimport { appearances } from '../types/Appearance';\n\nimport { tet } from '@/tetrisly';\n\nconst sizes = [\n  'large',\n  'medium',\n  'small',\n  'xSmall',\n  '2xSmall',\n] satisfies AvatarProps['size'][];\nconst shapes = ['rounded', 'square'] as const;\nconst emphasises = ['low', 'high'] as const;\n\nconst RowAvatar = ({ size: _, ...props }: AvatarProps) => (\n  <tet.div display=\"flex\" gap=\"40px\" alignItems=\"center\">\n    {sizes.map((size) => (\n      <Avatar key={size} {...props} size={size} />\n    ))}\n  </tet.div>\n);\n\nexport const AvatarDocs = () => (\n  <>\n    {emphasises.map((emphasis) => (\n      <tet.section key={emphasis} pb=\"component-padding-4xLarge\" py=\"500\">\n        <SectionHeader px={{ md: '1000', _: '500' }} variant=\"H1\" as=\"h2\">\n          {capitalize(emphasis)} Emphasis\n        </SectionHeader>\n        <Cols gap=\"80px\" px={{ md: '1000', _: '500' }}>\n          {shapes.map((shape) => (\n            <tet.div key={shape} display=\"flex\" flexDirection=\"column\">\n              <SectionHeader variant=\"H2\" as=\"h3\" py=\"500\">\n                {shape === 'rounded'\n                  ? 'Shape: Rounded (Default)'\n                  : 'Shape: Square'}\n              </SectionHeader>\n              <tet.hr />\n              <tet.div\n                display=\"flex\"\n                flexDirection=\"column\"\n                gap=\"component-gap-xLarge\"\n                py=\"component-padding-2xLarge\"\n              >\n                {emphasis === 'low' && (\n                  <RowAvatar\n                    appearance=\"image\"\n                    shape={shape}\n                    img={{\n                      src: 'https://thispersondoesnotexist.com/',\n                    }}\n                  />\n                )}\n                {appearances.map((appearance) => (\n                  <RowAvatar\n                    key={`${appearance}${shape}${emphasis}`}\n                    appearance={appearance}\n                    shape={shape}\n                    emphasis={emphasis}\n                    initials=\"M\"\n                  />\n                ))}\n              </tet.div>\n            </tet.div>\n          ))}\n        </Cols>\n      </tet.section>\n    ))}\n  </>\n);\n"],"names":["sizes","shapes","emphasises","RowAvatar","_","props","jsx","tet","size","Avatar","AvatarDocs","Fragment","emphasis","jsxs","SectionHeader","capitalize","Cols","shape","appearances","appearance"],"mappings":"ygBAUA,MAAMA,EAAQ,CACZ,QACA,SACA,QACA,SACA,SACF,EACMC,EAAS,CAAC,UAAW,QAAQ,EAC7BC,EAAa,CAAC,MAAO,MAAM,EAE3BC,EAAY,CAAC,CAAE,KAAMC,EAAG,GAAGC,CAAM,IACpCC,EAAAA,IAAAC,EAAI,IAAJ,CAAQ,QAAQ,OAAO,IAAI,OAAO,WAAW,SAC3C,SAAMP,EAAA,IAAKQ,GACTF,EAAAA,IAAAG,EAAA,CAAmB,GAAGJ,EAAO,KAAAG,CAAjB,EAAAA,CAA6B,CAC3C,CACH,CAAA,EAGWE,EAAa,IAErBJ,EAAAA,IAAAK,EAAA,SAAA,CAAA,SAAAT,EAAW,IAAKU,GACdC,EAAAA,KAAAN,EAAI,QAAJ,CAA2B,GAAG,4BAA4B,GAAG,MAC5D,SAAA,CAACM,EAAAA,KAAAC,EAAA,CAAc,GAAI,CAAE,GAAI,OAAQ,EAAG,KAAA,EAAS,QAAQ,KAAK,GAAG,KAC1D,SAAA,CAAAC,EAAAA,WAAWH,CAAQ,EAAE,WAAA,EACxB,EACAN,EAAAA,IAACU,GAAK,IAAI,OAAO,GAAI,CAAE,GAAI,OAAQ,EAAG,KAAM,EACzC,WAAO,IAAKC,GACVJ,EAAA,KAAAN,EAAI,IAAJ,CAAoB,QAAQ,OAAO,cAAc,SAChD,SAAA,CAACD,EAAAA,IAAAQ,EAAA,CAAc,QAAQ,KAAK,GAAG,KAAK,GAAG,MACpC,SAAAG,IAAU,UACP,2BACA,eACN,CAAA,EACAX,MAACC,EAAI,GAAJ,EAAO,EACRM,EAAA,KAACN,EAAI,IAAJ,CACC,QAAQ,OACR,cAAc,SACd,IAAI,uBACJ,GAAG,4BAEF,SAAA,CAAAK,IAAa,OACZN,EAAA,IAACH,EAAA,CACC,WAAW,QACX,MAAAc,EACA,IAAK,CACH,IAAK,qCACP,CAAA,CACF,EAEDC,EAAY,IAAKC,GAChBb,EAAA,IAACH,EAAA,CAEC,WAAAgB,EACA,MAAAF,EACA,SAAAL,EACA,SAAS,GAAA,EAJJ,GAAGO,CAAU,GAAGF,CAAK,GAAGL,CAAQ,EAAA,CAMxC,CAAA,CAAA,CACH,CAAA,GA/BYK,CAgCd,CACD,EACH,CAAA,GAxCgBL,CAyClB,CACD,EACH;;;;;;;;;;;;"}