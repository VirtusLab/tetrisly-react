{"version":3,"file":"Button.stories-5c5bb8f0.js","sources":["../../src/docs-components/ButtonDocs/ButtonSizes.tsx","../../src/docs-components/ButtonDocs/ButtonRow.tsx","../../src/docs-components/ButtonDocs/ButtonDocs.tsx"],"sourcesContent":["import { Button, ButtonProps } from '@/components/Button';\nimport { tet } from '@/tetrisly';\n\nconst getButtonSizes = (variant: ButtonProps['variant']) => {\n  if (variant === 'bare') {\n    return ['medium', 'large'] as const;\n  }\n  return ['small', 'medium', 'large'] as const;\n};\n\nexport const ButtonSizes = ({ variant, ...buttonProps }: ButtonProps) => (\n  <tet.div\n    display=\"flex\"\n    flexBasis=\"180px\"\n    flexGrow=\"1\"\n    flexShrink=\"0\"\n    alignItems=\"flex-start\"\n    justifyContent=\"center\"\n    flexDirection=\"column\"\n    gap=\"$dimension-400\"\n    py=\"$dimension-500\"\n  >\n    {getButtonSizes(variant).map((size) => (\n      <Button\n        key={size}\n        {...({ ...buttonProps, size, variant } as ButtonProps)}\n      />\n    ))}\n  </tet.div>\n);\n","import { ButtonSizes } from './ButtonSizes';\n\nimport { ButtonProps } from '@/components/Button';\nimport { tet } from '@/tetrisly';\n\ntype ButtonRowProps = Pick<ButtonProps, 'variant' | 'appearance' | 'intent'>;\n\nexport const ButtonRow = ({ variant, appearance, intent }: ButtonRowProps) => {\n  const baseProps = { variant, appearance, intent } as ButtonProps;\n  return (\n    <tet.div display=\"flex\" gap=\"$dimension-300\" pl=\"5px\" overflowX=\"scroll\">\n      <ButtonSizes {...baseProps} label=\"Button label\" />\n      <ButtonSizes\n        {...baseProps}\n        label=\"Button label\"\n        beforeIcon=\"20-placeholder\"\n      />\n      <ButtonSizes\n        {...({\n          ...baseProps,\n          label: 'Button label',\n          afterIcon: '20-placeholder',\n        } as ButtonProps)}\n      />\n      <ButtonSizes\n        {...({\n          ...baseProps,\n          label: 'Button label',\n          beforeIcon: '20-placeholder',\n          afterIcon: '20-placeholder',\n        } as ButtonProps)}\n      />\n      <ButtonSizes\n        {...({\n          ...baseProps,\n          label: 'Button label',\n          hasDropdownIndicator: true,\n        } as ButtonProps)}\n      />\n      <ButtonSizes\n        {...({\n          ...baseProps,\n          label: 'Button label',\n          beforeIcon: '20-placeholder',\n          hasDropdownIndicator: true,\n        } as ButtonProps)}\n      />\n    </tet.div>\n  );\n};\n","import { startCase } from 'lodash';\nimport type { FC } from 'react';\n\nimport { ButtonRow } from './ButtonRow';\nimport { SectionHeader } from '../common/SectionHeader';\n\nimport type { ButtonProps } from '@/components/Button';\nimport { tet } from '@/tetrisly';\n\nconst variants = ['default', 'ghost', 'bare'] as const;\n\nconst getButtonAppearances = (variant: ButtonProps['variant']) => {\n  if (variant === 'default') {\n    return ['primary', 'secondary', 'inverted'] as const;\n  }\n  return ['primary', 'secondary', 'inverted', 'reverseInverted'] as const;\n};\n\nconst getButtonIntents = (\n  variant: ButtonProps['variant'],\n  appearance: ButtonProps['appearance'],\n) => {\n  if (\n    (variant === 'default' && appearance === 'secondary') ||\n    appearance === 'primary'\n  )\n    return ['none', 'success', 'destructive'] as const;\n  return ['none'] as const;\n};\n\nexport const ButtonDocs: FC = () => (\n  <>\n    {variants.map((variant) => (\n      <tet.section\n        key={variant}\n        display=\"flex\"\n        pt=\"$dimension-500\"\n        flexDirection=\"column\"\n      >\n        <SectionHeader variant=\"Hero\" as=\"h2\" px=\"$dimension-1000\">\n          {startCase(variant)}\n        </SectionHeader>\n        {getButtonAppearances(variant).map((appearance) => (\n          <tet.div\n            key={appearance}\n            display=\"flex\"\n            flexDirection=\"column\"\n            bg={\n              appearance === 'inverted'\n                ? '$color-background-inverted'\n                : undefined\n            }\n          >\n            <SectionHeader\n              variant=\"H2\"\n              inverted={appearance === 'inverted'}\n              as=\"h3\"\n              px=\"$dimension-1000\"\n              py=\"$dimension-500\"\n              borderBottom=\"$color-neutral-strong\"\n            >\n              {startCase(appearance)}\n            </SectionHeader>\n\n            {getButtonIntents(variant, appearance).map((intent) => (\n              <tet.div\n                key={intent}\n                display=\"flex\"\n                flexDirection=\"column\"\n                px=\"$dimension-1000\"\n                pb=\"$dimension-500\"\n                borderBottomWidth=\"1px\"\n                borderBottomColor=\"$color-border-neutral-subtle\"\n              >\n                <SectionHeader\n                  variant=\"H3\"\n                  as=\"h4\"\n                  pt=\"$dimension-500\"\n                  inverted={appearance === 'inverted'}\n                >\n                  Intent: {startCase(intent)}\n                </SectionHeader>\n                <ButtonRow\n                  variant={variant}\n                  appearance={appearance}\n                  intent={intent}\n                />\n              </tet.div>\n            ))}\n          </tet.div>\n        ))}\n      </tet.section>\n    ))}\n  </>\n);\n"],"names":["getButtonSizes","variant","ButtonSizes","buttonProps","jsx","tet","size","Button","ButtonRow","appearance","intent","baseProps","jsxs","variants","getButtonAppearances","getButtonIntents","ButtonDocs","Fragment","SectionHeader","startCase"],"mappings":"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"}