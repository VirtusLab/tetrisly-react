{"version":3,"file":"TextInput-28ebe73f.js","sources":["../../src/components/TextInput/TextInput.styles.ts","../../src/components/TextInput/stylesBuilder/stylesBuilder.ts","../../src/components/TextInput/TextInput.tsx"],"sourcesContent":["import { BaseProps } from '@/types/BaseProps';\n\nexport type TextInputConfig = {\n  innerElements?: {\n    input?: BaseProps;\n    icon?: BaseProps;\n    text?: BaseProps;\n    clearButton?: BaseProps;\n    beforeComponent?: {\n      spacing?: Partial<\n        Record<'Icon' | 'Avatar' | 'Prefix' | 'Dropdown', BaseProps>\n      >;\n    } & BaseProps;\n    afterComponent?: {\n      spacing?: Partial<\n        Record<\n          'Icon' | 'Sufix' | 'Button' | 'IconButton' | 'Dropdown',\n          BaseProps\n        >\n      >;\n    } & BaseProps;\n  };\n} & BaseProps;\n\nexport const defaultConfig = {\n  display: 'flex',\n  alignItems: 'center',\n  h: '$size-medium',\n  padding: '$space-component-padding-small $space-component-padding-large',\n  flexShrink: 0,\n  ring: '$border-width-small',\n  ringColor: {\n    _: '$color-interaction-border-neutral-normal',\n    hoverWithoutButton: '$color-interaction-border-hover',\n    alert: '$color-interaction-border-alert',\n  },\n  borderRadius: '$border-radius-large',\n  opacity: {\n    disabled: '$opacity-disabled',\n  },\n  outlineStyle: {\n    '&:has(input:focus)': 'solid',\n  },\n  outlineColor: {\n    focusWithin: '$color-interaction-focus-default',\n  },\n  outlineWidth: {\n    '&:has(input:focus)': '$border-width-focus',\n  },\n  outlineOffset: {\n    alert: '$border-width-focus',\n  },\n  transition: true,\n  transitionDuration: 50,\n  cursor: 'text',\n  pointerEvents: {\n    disabled: 'none',\n  },\n  innerElements: {\n    input: {\n      w: '100%',\n      h: '100%',\n      outline: 'none',\n      text: '$typo-body-medium',\n      color: {\n        placeholder: '$color-content-tertiary',\n      },\n      backgroundColor: '$color-interaction-background-formField',\n    },\n    icon: {\n      color: '$color-content-secondary',\n    },\n    text: {\n      text: '$typo-body-medium',\n      color: '$color-content-secondary',\n    },\n    clearButton: {\n      marginLeft: '$space-component-gap-small',\n    },\n    beforeComponent: {\n      spacing: {\n        Icon: {\n          marginLeft: '$space-component-padding-medium',\n          marginRight: '$space-component-padding-small',\n        },\n        Avatar: {\n          margin: '0 $space-component-padding-small',\n        },\n        Prefix: {\n          margin: '0 $space-component-padding-large',\n        },\n        Dropdown: {\n          marginLeft: '$space-component-padding-xSmall',\n          marginRight: '$space-component-padding-small',\n        },\n      },\n    },\n    afterComponent: {\n      spacing: {\n        Icon: {\n          marginLeft: '$space-component-padding-small',\n          marginRight: '$space-component-padding-large',\n        },\n        Sufix: {\n          marginLeft: '$space-component-padding-small',\n          marginRight: '$space-component-padding-large',\n        },\n        Button: {\n          marginLeft: '$space-component-padding-small',\n          marginRight: '$space-component-padding-xSmall',\n        },\n        IconButton: {\n          marginLeft: '$space-component-padding-small',\n          marginRight: '$space-component-padding-xSmall',\n        },\n        Dropdown: {\n          marginLeft: '$space-component-padding-small',\n          marginRight: '$space-component-padding-xSmall',\n        },\n      },\n    },\n  },\n} satisfies TextInputConfig;\n","import { TextInputConfig, defaultConfig } from '../TextInput.styles';\n\nimport { mergeConfigWithCustom } from '@/services/mergeConfigWithCustom/mergeConfigWithCutom';\nimport { BaseProps } from '@/types/BaseProps';\n\ntype TextInputStylesBuilder = {\n  container: BaseProps;\n  input: BaseProps;\n  icon: BaseProps;\n  text: BaseProps;\n  clearButton: BaseProps;\n  beforeComponent: BaseProps;\n  afterComponent: BaseProps;\n};\n\nexport const stylesBuilder = (\n  custom?: TextInputConfig,\n  beforeComponentType?: 'Icon' | 'Avatar' | 'Prefix' | 'Dropdown',\n  afterComponentType?: 'Icon' | 'Sufix' | 'Button' | 'IconButton' | 'Dropdown',\n): TextInputStylesBuilder => {\n  const {\n    innerElements: {\n      input,\n      icon,\n      text,\n      clearButton,\n      beforeComponent: {\n        spacing: beforeComponentSpacing,\n        ...beforeComponentStyles\n      },\n      afterComponent: {\n        spacing: afterComponentSpacing,\n        ...afterComponentStyles\n      },\n    },\n    ...container\n  } = mergeConfigWithCustom({\n    defaultConfig,\n    custom,\n  });\n\n  return {\n    container,\n    input,\n    icon,\n    text,\n    clearButton,\n    beforeComponent: {\n      ...beforeComponentStyles,\n      ...(beforeComponentType && beforeComponentSpacing[beforeComponentType]),\n    },\n    afterComponent: {\n      ...afterComponentStyles,\n      ...(afterComponentType && afterComponentSpacing[afterComponentType]),\n    },\n  };\n};\n","import { Icon } from '@virtuslab/tetrisly-icons';\nimport {\n  forwardRef,\n  useRef,\n  useCallback,\n  useState,\n  ChangeEventHandler,\n  MouseEventHandler,\n  ChangeEvent,\n  useMemo,\n} from 'react';\n\nimport { stylesBuilder } from './stylesBuilder';\nimport { TextInputProps } from './TextInput.props';\nimport { Avatar } from '../Avatar';\nimport { Button } from '../Button';\nimport { IconButton } from '../IconButton';\n\nimport { extractInputProps } from '@/services';\nimport { tet } from '@/tetrisly';\nimport { MarginProps } from '@/types/MarginProps';\n\nexport const TextInput = forwardRef<\n  HTMLInputElement,\n  TextInputProps & MarginProps\n>(\n  (\n    {\n      type = 'text',\n      beforeComponent,\n      afterComponent,\n      state,\n      hasClearButton,\n      custom,\n      value,\n      onChange,\n      ...restProps\n    },\n    inputRef,\n  ) => {\n    const [innerValue, setInnerValue] = useState('');\n    const styles = useMemo(\n      () => stylesBuilder(custom, beforeComponent?.type, afterComponent?.type),\n      [afterComponent?.type, beforeComponent?.type, custom],\n    );\n    const [textInputProps, containerProps] = extractInputProps(restProps);\n\n    const containerRef = useRef<HTMLInputElement | null>(null);\n\n    const handleContainerClick: MouseEventHandler = useCallback(\n      (e) => {\n        if (e.target === containerRef.current) {\n          const input = containerRef.current?.querySelector('input');\n          input?.focus();\n        }\n      },\n      [containerRef],\n    );\n\n    const handleOnChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n      (e) => {\n        setInnerValue(e.target.value);\n        onChange?.(e);\n      },\n      [onChange],\n    );\n\n    const handleOnClear: MouseEventHandler<HTMLButtonElement> =\n      useCallback(() => {\n        setInnerValue('');\n        onChange?.({ target: { value: '' } } as ChangeEvent<HTMLInputElement>);\n      }, [onChange]);\n\n    return (\n      <tet.div\n        ref={containerRef}\n        onClick={handleContainerClick}\n        {...styles.container}\n        pl={!!beforeComponent && '0'}\n        pr={!!afterComponent && '0'}\n        data-testid=\"text-input\"\n        data-state={state}\n        tabIndex={0}\n        {...containerProps}\n      >\n        {!!beforeComponent && (\n          <tet.span\n            {...styles.beforeComponent}\n            data-testid=\"text-input-before-component\"\n          >\n            {beforeComponent.type === 'Icon' && (\n              <tet.span {...styles.icon}>\n                <Icon {...beforeComponent.props} />\n              </tet.span>\n            )}\n            {beforeComponent.type === 'Prefix' && (\n              <tet.span {...styles.text}>{beforeComponent.props.text}</tet.span>\n            )}\n            {beforeComponent.type === 'Dropdown' && (\n              <Button\n                size=\"small\"\n                variant=\"ghost\"\n                label={beforeComponent.props.label}\n                hasDropdownIndicator\n              />\n            )}\n            {beforeComponent.type === 'Avatar' && (\n              <Avatar {...beforeComponent.props} shape=\"square\" size=\"xSmall\" />\n            )}\n          </tet.span>\n        )}\n        <tet.input\n          {...styles.input}\n          value={value || innerValue}\n          onChange={handleOnChange}\n          data-testid=\"text-input-input\"\n          {...textInputProps}\n          type={type}\n          disabled={state === 'disabled'}\n          ref={inputRef}\n        />\n        {!!hasClearButton && (value || innerValue) && (\n          <IconButton\n            variant=\"bare\"\n            icon=\"20-close\"\n            onClick={handleOnClear}\n            {...styles.clearButton}\n            data-testid=\"text-input-clear-button\"\n          />\n        )}\n        {!!afterComponent && (\n          <tet.span\n            {...styles.afterComponent}\n            data-testid=\"text-input-after-component\"\n          >\n            {afterComponent.type === 'Icon' && (\n              <tet.span {...styles.icon}>\n                <Icon {...afterComponent.props} />\n              </tet.span>\n            )}\n            {afterComponent.type === 'IconButton' && (\n              <IconButton\n                variant=\"ghost\"\n                size=\"small\"\n                {...afterComponent.props}\n              />\n            )}\n            {afterComponent.type === 'Sufix' && (\n              <tet.span {...styles.text}>{afterComponent.props.text}</tet.span>\n            )}\n            {afterComponent.type === 'Button' && (\n              <Button size=\"small\" variant=\"ghost\" label=\"Label\" />\n            )}\n            {afterComponent.type === 'Dropdown' && (\n              <Button\n                size=\"small\"\n                variant=\"ghost\"\n                label={afterComponent.props.label}\n                hasDropdownIndicator\n              />\n            )}\n          </tet.span>\n        )}\n      </tet.div>\n    );\n  },\n);\n"],"names":["defaultConfig","stylesBuilder","custom","beforeComponentType","afterComponentType","input","icon","text","clearButton","beforeComponentSpacing","beforeComponentStyles","afterComponentSpacing","afterComponentStyles","container","mergeConfigWithCustom","TextInput","forwardRef","type","beforeComponent","afterComponent","state","hasClearButton","value","onChange","restProps","inputRef","innerValue","setInnerValue","useState","styles","useMemo","textInputProps","containerProps","extractInputProps","containerRef","useRef","handleContainerClick","useCallback","e","_a","handleOnChange","handleOnClear","jsxs","tet","jsx","Icon","Button","Avatar","IconButton"],"mappings":"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"}